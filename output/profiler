Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  Ks/call  Ks/call  name    
 17.29    451.90   451.90 26948375915     0.00     0.00  pnl_vect_get
 15.69    861.87   409.97 8271514397     0.00     0.00  pnl_mat_get
 12.09   1177.72   315.85 188500000     0.00     0.00  BlackScholesModel::asset(_PnlMat*, double, _PnlRng*, _PnlVect const*)
 11.04   1466.35   288.62 1247371180     0.00     0.00  Ocelia::get_foreign_index_market_value(_PnlMat const*, int, int) const
  6.51   1636.52   170.18 1982300287     0.00     0.00  Ocelia::compute_valeurs_n_ans(_PnlVect*, _PnlMat const*, int) const
  5.41   1777.87   141.35 7350807940     0.00     0.00  pnl_mat_lget
  5.14   1912.07   134.20 205327703     0.00     0.00  Ocelia::compute_perf_moyenne_panier(_PnlMat const*) const
  5.12   2045.79   133.72 1247689539     0.00     0.00  pnl_vect_int_get
  4.93   2174.64   128.85 8345193262     0.00     0.00  pnl_vect_lget
  4.45   2290.98   116.34 1982300287     0.00     0.00  trunc(_PnlVect*, int)
  2.86   2365.78    74.80 935534007     0.00     0.00  InterestRate::compute_foreign_risk_free_asset(double, double, int)
  2.36   2427.57    61.80 1708400286     0.00     0.00  Ocelia::compute_perfs_n_ans(_PnlVect*, _PnlMat const*, int) const
  2.34   2488.68    61.11 935534007     0.00     0.00  InterestRate::get_foreign_rate(int)
  2.34   2549.78    61.10 273900001     0.00     0.00  Ocelia::payoff(_PnlMat const*)
  0.46   2561.70    11.92     7420     0.00     0.00  InterestRate::compute_domestic_risk_free_asset(double, double)
  0.38   2571.52     9.82 85400000     0.00     0.00  BlackScholesModel::shift_asset(_PnlMat*, double, _PnlMat const*, int, double) const
  0.27   2578.66     7.14 383107420     0.00     0.00  InterestRate::get_domestic_rate()
  0.24   2584.83     6.17 273900000     0.00     0.00  first_index_gte(_PnlVect const*, double)
  0.23   2590.83     5.99    86730     0.00     0.00  std::operator|(std::_Ios_Openmode, std::_Ios_Openmode)
  0.16   2595.06     4.23 273900001     0.00     0.00  Ocelia::compute_nouveau_depart(_PnlMat const*)
  0.16   2599.19     4.13 1434500285     0.00     0.00  are_all_positive(_PnlVect const*)
  0.13   2602.57     3.38 188500000     0.00     0.00  StandardMonteCarloPricer::add_price(double, double&, double&)
  0.09   2604.98     2.41 1982300287     0.00     0.00  __gnu_cxx::__promote_2<int, int, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type>::__type std::pow<int, int>(int, int)
  0.09   2607.28     2.30     1824     0.00     0.00  StandardMonteCarloPricer::price(_PnlVect const*, double, double&, double&)
  0.08   2609.25     1.98 273900001     0.00     0.00  Ocelia::compute_flux_n_ans(_PnlMat const*, int) const
  0.07   2611.19     1.93  6100000     0.00     0.00  StandardMonteCarloPricer::add_delta(double, _PnlVect*, _PnlVect*)
  0.07   2613.02     1.83 231200001     0.00     0.00  Ocelia::get_annee_payoff() const
  0.01   2613.24     0.22       61     0.00     0.01  StandardMonteCarloPricer::price_and_delta(_PnlVect const*, double, double&, double&, _PnlVect*, _PnlVect*)
  0.01   2613.39     0.15     1825     0.00     0.00  Ocelia::adjust_spot(_PnlVect*, double) const
  0.00   2613.51     0.13    86728     0.00     0.00  split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char)
  0.00   2613.61     0.10     1825     0.00     0.00  log_returns(_PnlMat*, _PnlMat const*, int, int)
  0.00   2613.69     0.08        1     0.00     0.00  BlackScholesModel::~BlackScholesModel()
  0.00   2613.76     0.07    57752     0.00     0.00  has_no_index_value_null(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*, _PnlVectInt const*)
  0.00   2613.82     0.06        1     0.00     0.00  _GLOBAL__sub_I__Z5splitPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS4_c
  0.00   2613.86     0.04    51100     0.00     0.00  compute_covariance(_PnlMat const*, _PnlVect const*, int, int)
  0.00   2613.88     0.02        1     0.00     0.00  InterestRate::~InterestRate()
  0.00   2613.88     0.00   185722     0.00     0.00  bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)
  0.00   2613.88     0.00   128880     0.00     0.00  std::vector<DateTime*, std::allocator<DateTime*> >::operator[](unsigned long) const
  0.00   2613.88     0.00   115212     0.00     0.00  DateTime*&& std::forward<DateTime*>(std::remove_reference<DateTime*>::type&)
  0.00   2613.88     0.00    86928     0.00     0.00  int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)
  0.00   2613.88     0.00    86928     0.00     0.00  std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int)
  0.00   2613.88     0.00    86928     0.00     0.00  __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Range_chk::_S_chk(long, std::integral_constant<bool, true>)
  0.00   2613.88     0.00    86928     0.00     0.00  __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::_Save_errno()
  0.00   2613.88     0.00    86928     0.00     0.00  __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::~_Save_errno()
  0.00   2613.88     0.00    75470     0.00     0.00  std::vector<DateTime*, std::allocator<DateTime*> >::size() const
  0.00   2613.88     0.00    71054     0.00     0.00  __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >::base() const
  0.00   2613.88     0.00    68697     0.00     0.00  DateTime::compare(DateTime const*) const
  0.00   2613.88     0.00    43572     0.00     0.00  operator new(unsigned long, void*)
  0.00   2613.88     0.00    38374     0.00     0.00  DateTime::DateTime(int, int, int)
  0.00   2613.88     0.00    38366     0.00     0.00  void __gnu_cxx::new_allocator<DateTime*>::construct<DateTime*, DateTime*>(DateTime**, DateTime*&&)
  0.00   2613.88     0.00    38366     0.00     0.00  void std::allocator_traits<std::allocator<DateTime*> >::construct<DateTime*, DateTime*>(std::allocator<DateTime*>&, DateTime**, DateTime*&&)
  0.00   2613.88     0.00    38366     0.00     0.00  void std::vector<DateTime*, std::allocator<DateTime*> >::emplace_back<DateTime*>(DateTime*&&)
  0.00   2613.88     0.00    38366     0.00     0.00  std::vector<DateTime*, std::allocator<DateTime*> >::push_back(DateTime*&&)
  0.00   2613.88     0.00    38366     0.00     0.00  std::remove_reference<DateTime*&>::type&& std::move<DateTime*&>(DateTime*&)
  0.00   2613.88     0.00    35245     0.00     0.00  bool __gnu_cxx::operator!=<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > const&, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > const&)
  0.00   2613.88     0.00    35239     0.00     0.00  DateTime::~DateTime()
  0.00   2613.88     0.00    35236     0.00     0.00  __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >::operator++()
  0.00   2613.88     0.00    35236     0.00     0.00  __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >::operator*() const
  0.00   2613.88     0.00    28976     0.00     0.00  parse_date_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char)
  0.00   2613.88     0.00    12681     0.00     0.00  pnl_vect_int_lget
  0.00   2613.88     0.00    10438     0.00     0.00  DateTime* const& std::forward<DateTime* const&>(std::remove_reference<DateTime* const&>::type&)
  0.00   2613.88     0.00     9390     0.00     0.00  DateTime::copy() const
  0.00   2613.88     0.00     5206     0.00     0.00  void __gnu_cxx::new_allocator<DateTime*>::construct<DateTime*, DateTime* const&>(DateTime**, DateTime* const&)
  0.00   2613.88     0.00     5206     0.00     0.00  void std::allocator_traits<std::allocator<DateTime*> >::construct<DateTime*, DateTime* const&>(std::allocator<DateTime*>&, DateTime**, DateTime* const&)
  0.00   2613.88     0.00     5206     0.00     0.00  std::vector<DateTime*, std::allocator<DateTime*> >::push_back(DateTime* const&)
  0.00   2613.88     0.00     3711     0.00     0.00  std::vector<DateTime*, std::allocator<DateTime*> >::operator[](unsigned long)
  0.00   2613.88     0.00     3650     0.00     0.00  HedgingPortfolio::get_portfolio_value(double, _PnlVect const*) const
  0.00   2613.88     0.00     3650     0.00     0.00  HedgingPortfolio::get_valeur_liquidative(double, _PnlVect const*) const
  0.00   2613.88     0.00     2312     0.00     0.00  __gnu_cxx::__enable_if<std::__is_integer<int>::__value, double>::__type std::exp<int>(int)
  0.00   2613.88     0.00     1887     0.00     0.00  operator<<(std::ostream&, DateTime const*)
  0.00   2613.88     0.00     1825     0.00     0.00  compute_sigma(_PnlMat*, _PnlMat const*, int, int)
  0.00   2613.88     0.00     1825     0.00     0.00  compute_volatility(_PnlVect*, _PnlMat const*)
  0.00   2613.88     0.00     1825     0.00     0.00  compute_covariances(_PnlMat*, _PnlMat const*, int, int)
  0.00   2613.88     0.00     1825     0.00     0.00  means(_PnlVect*, _PnlMat const*)
  0.00   2613.88     0.00     1825     0.00     0.00  HedgingPortfolio::get_FinalPnL(double, double, _PnlVect const*) const
  0.00   2613.88     0.00     1825     0.00     0.00  HedgingPortfolio::get_tracking_error(double, double, _PnlVect const*) const
  0.00   2613.88     0.00     1825     0.00     0.00  Ocelia::adjust_sigma(_PnlMat*) const
  0.00   2613.88     0.00      842     0.00     0.00  DateTime** std::__niter_base<DateTime**>(DateTime**)
  0.00   2613.88     0.00      422     0.00     0.00  __gnu_cxx::new_allocator<DateTime*>::max_size() const
  0.00   2613.88     0.00      318     0.00     0.00  std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_M_get_Tp_allocator()
  0.00   2613.88     0.00      304     0.00     0.00  __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >::__normal_iterator(DateTime** const&)
  0.00   2613.88     0.00      283     0.00     0.00  std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_M_get_Tp_allocator() const
  0.00   2613.88     0.00      280     0.00     0.00  std::vector<DateTime*, std::allocator<DateTime*> >::max_size() const
  0.00   2613.88     0.00      280     0.00     0.00  std::allocator_traits<std::allocator<DateTime*> >::max_size(std::allocator<DateTime*> const&)
  0.00   2613.88     0.00      280     0.00     0.00  std::vector<DateTime*, std::allocator<DateTime*> >::_S_max_size(std::allocator<DateTime*> const&)
  0.00   2613.88     0.00      280     0.00     0.00  std::vector<DateTime*, std::allocator<DateTime*> >::_S_relocate(DateTime**, DateTime**, DateTime**, std::allocator<DateTime*>&)
  0.00   2613.88     0.00      280     0.00     0.00  std::vector<DateTime*, std::allocator<DateTime*> >::_S_do_relocate(DateTime**, DateTime**, DateTime**, std::allocator<DateTime*>&, std::integral_constant<bool, true>)
  0.00   2613.88     0.00      280     0.00     0.00  std::vector<DateTime*, std::allocator<DateTime*> >::_S_use_relocate()
  0.00   2613.88     0.00      280     0.00     0.00  std::vector<DateTime*, std::allocator<DateTime*> >::_S_nothrow_relocate(std::integral_constant<bool, true>)
  0.00   2613.88     0.00      280     0.00     0.00  DateTime** std::__relocate_a<DateTime**, DateTime**, std::allocator<DateTime*> >(DateTime**, DateTime**, DateTime**, std::allocator<DateTime*>&)
  0.00   2613.88     0.00      280     0.00     0.00  std::enable_if<std::__is_bitwise_relocatable<DateTime*, void>::value, DateTime**>::type std::__relocate_a_1<DateTime*, DateTime*>(DateTime**, DateTime**, DateTime**, std::allocator<DateTime*>&)
  0.00   2613.88     0.00      280     0.00     0.00  unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)
  0.00   2613.88     0.00      159     0.00     0.00  std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_M_deallocate(DateTime**, unsigned long)
  0.00   2613.88     0.00      151     0.00     0.00  std::vector<DateTime*, std::allocator<DateTime*> >::end()
  0.00   2613.88     0.00      151     0.00     0.00  std::vector<DateTime*, std::allocator<DateTime*> >::begin()
  0.00   2613.88     0.00      142     0.00     0.00  __gnu_cxx::new_allocator<DateTime*>::deallocate(DateTime**, unsigned long)
  0.00   2613.88     0.00      142     0.00     0.00  __gnu_cxx::new_allocator<DateTime*>::allocate(unsigned long, void const*)
  0.00   2613.88     0.00      142     0.00     0.00  std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_M_allocate(unsigned long)
  0.00   2613.88     0.00      142     0.00     0.00  std::allocator_traits<std::allocator<DateTime*> >::deallocate(std::allocator<DateTime*>&, DateTime**, unsigned long)
  0.00   2613.88     0.00      142     0.00     0.00  std::allocator_traits<std::allocator<DateTime*> >::allocate(std::allocator<DateTime*>&, unsigned long)
  0.00   2613.88     0.00      140     0.00     0.00  __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >::difference_type __gnu_cxx::operator-<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > const&, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > const&)
  0.00   2613.88     0.00      140     0.00     0.00  std::vector<DateTime*, std::allocator<DateTime*> >::_M_check_len(unsigned long, char const*) const
  0.00   2613.88     0.00      140     0.00     0.00  unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)
  0.00   2613.88     0.00      122     0.00     0.00  operator<<(std::ostream&, _PnlVect const*)
  0.00   2613.88     0.00      114     0.00     0.00  void std::vector<DateTime*, std::allocator<DateTime*> >::_M_realloc_insert<DateTime*>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime*&&)
  0.00   2613.88     0.00       60     0.00     0.00  HedgingPortfolio::rebalancing(double, _PnlVect const*, _PnlVect const*)
  0.00   2613.88     0.00       28     0.00     0.00  void std::_Destroy_aux<true>::__destroy<DateTime**>(DateTime**, DateTime**)
  0.00   2613.88     0.00       28     0.00     0.00  void std::_Destroy<DateTime**>(DateTime**, DateTime**)
  0.00   2613.88     0.00       28     0.00     0.00  void std::_Destroy<DateTime**, DateTime*>(DateTime**, DateTime**, std::allocator<DateTime*>&)
  0.00   2613.88     0.00       26     0.00     0.00  void std::vector<DateTime*, std::allocator<DateTime*> >::_M_realloc_insert<DateTime* const&>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime* const&)
  0.00   2613.88     0.00       23     0.00     0.00  std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl_data::_Vector_impl_data()
  0.00   2613.88     0.00       20     0.00     0.00  __gnu_cxx::new_allocator<DateTime*>::~new_allocator()
  0.00   2613.88     0.00       20     0.00     0.00  std::allocator<DateTime*>::~allocator()
  0.00   2613.88     0.00       18     0.00     0.00  std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl_data::_M_copy_data(std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl_data const&)
  0.00   2613.88     0.00       17     0.00     0.00  std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl::~_Vector_impl()
  0.00   2613.88     0.00       17     0.00     0.00  std::_Vector_base<DateTime*, std::allocator<DateTime*> >::~_Vector_base()
  0.00   2613.88     0.00       14     0.00     0.00  __gnu_cxx::new_allocator<DateTime*>::new_allocator()
  0.00   2613.88     0.00       14     0.00     0.00  std::allocator<DateTime*>::allocator()
  0.00   2613.88     0.00       14     0.00     0.00  std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl::_Vector_impl()
  0.00   2613.88     0.00       14     0.00     0.00  std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_base()
  0.00   2613.88     0.00       14     0.00     0.00  std::vector<DateTime*, std::allocator<DateTime*> >::vector()
  0.00   2613.88     0.00       13     0.00     0.00  std::vector<DateTime*, std::allocator<DateTime*> >::~vector()
  0.00   2613.88     0.00        9     0.00     0.00  delete_date_vector(std::vector<DateTime*, std::allocator<DateTime*> >&)
  0.00   2613.88     0.00        9     0.00     0.00  std::vector<DateTime*, std::allocator<DateTime*> >::_M_erase_at_end(DateTime**)
  0.00   2613.88     0.00        9     0.00     0.00  std::vector<DateTime*, std::allocator<DateTime*> >::clear()
  0.00   2613.88     0.00        8     0.00     0.00  calcul_indices_dates(_PnlVectInt*, std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&)
  0.00   2613.88     0.00        8     0.00     0.00  __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >::__normal_iterator(DateTime* const* const&)
  0.00   2613.88     0.00        8     0.00     0.00  __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >::base() const
  0.00   2613.88     0.00        8     0.00     0.00  __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > > std::__miter_base<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > > >(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >)
  0.00   2613.88     0.00        8     0.00     0.00  DateTime* const* std::__niter_base<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >)
  0.00   2613.88     0.00        6     0.00     0.00  __gnu_cxx::new_allocator<DateTime*>::new_allocator(__gnu_cxx::new_allocator<DateTime*> const&)
  0.00   2613.88     0.00        6     0.00     0.00  std::allocator<DateTime*>::allocator(std::allocator<DateTime*> const&)
  0.00   2613.88     0.00        6     0.00     0.00  std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl_data::_M_swap_data(std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl_data&)
  0.00   2613.88     0.00        5     0.00     0.00  get_prices_from_date(_PnlMat*, std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&, _PnlMat const*)
  0.00   2613.88     0.00        4     0.00     0.00  MarketDataFeed::set_data()
  0.00   2613.88     0.00        4     0.00     0.00  MarketDataFeed::MarketDataFeed(_PnlVectInt*, unsigned int, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
  0.00   2613.88     0.00        4     0.00     0.00  MarketDataFeed::~MarketDataFeed()
  0.00   2613.88     0.00        4     0.00     0.00  MarketDataFeed::~MarketDataFeed()
  0.00   2613.88     0.00        4     0.00     0.00  IDataFeed::IDataFeed(_PnlVectInt*, unsigned int, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
  0.00   2613.88     0.00        4     0.00     0.00  IDataFeed::~IDataFeed()
  0.00   2613.88     0.00        4     0.00     0.00  __gnu_cxx::__alloc_traits<std::allocator<DateTime*>, DateTime*>::_S_propagate_on_copy_assign()
  0.00   2613.88     0.00        4     0.00     0.00  MarketDataFeed::get_number_valid_data() const
  0.00   2613.88     0.00        4     0.00     0.00  std::vector<DateTime*, std::allocator<DateTime*> >::end() const
  0.00   2613.88     0.00        4     0.00     0.00  std::vector<DateTime*, std::allocator<DateTime*> >::begin() const
  0.00   2613.88     0.00        4     0.00     0.00  std::vector<DateTime*, std::allocator<DateTime*> >::capacity() const
  0.00   2613.88     0.00        4     0.00     0.00  DateTime** std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<DateTime*>(DateTime* const*, DateTime* const*, DateTime**)
  0.00   2613.88     0.00        4     0.00     0.00  std::vector<DateTime*, std::allocator<DateTime*> >::operator=(std::vector<DateTime*, std::allocator<DateTime*> > const&)
  0.00   2613.88     0.00        4     0.00     0.00  DateTime** std::__niter_base<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >)
  0.00   2613.88     0.00        4     0.00     0.00  DateTime** std::__copy_move_a<false, DateTime* const*, DateTime**>(DateTime* const*, DateTime* const*, DateTime**)
  0.00   2613.88     0.00        3     0.00     0.00  same_dates(std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&)
  0.00   2613.88     0.00        3     0.00     0.00  parse_dates_file(std::vector<DateTime*, std::allocator<DateTime*> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, char)
  0.00   2613.88     0.00        3     0.00     0.00  get_indice_from_date(std::vector<DateTime*, std::allocator<DateTime*> > const&, DateTime const*)
  0.00   2613.88     0.00        3     0.00     0.00  get_indices_from_date_dichotomic(std::vector<DateTime*, std::allocator<DateTime*> > const&, DateTime const*, int, int)
  0.00   2613.88     0.00        3     0.00     0.00  std::_Vector_base<DateTime*, std::allocator<DateTime*> >::get_allocator() const
  0.00   2613.88     0.00        3     0.00     0.00  std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl::_Vector_impl(std::allocator<DateTime*> const&)
  0.00   2613.88     0.00        3     0.00     0.00  std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_base(std::allocator<DateTime*> const&)
  0.00   2613.88     0.00        3     0.00     0.00  std::vector<DateTime*, std::allocator<DateTime*> >::_M_move_assign(std::vector<DateTime*, std::allocator<DateTime*> >&&, std::integral_constant<bool, true>)
  0.00   2613.88     0.00        3     0.00     0.00  std::vector<DateTime*, std::allocator<DateTime*> >::vector(std::allocator<DateTime*> const&)
  0.00   2613.88     0.00        3     0.00     0.00  std::vector<DateTime*, std::allocator<DateTime*> >::operator=(std::vector<DateTime*, std::allocator<DateTime*> >&&)
  0.00   2613.88     0.00        3     0.00     0.00  void std::__alloc_on_move<std::allocator<DateTime*> >(std::allocator<DateTime*>&, std::allocator<DateTime*>&)
  0.00   2613.88     0.00        3     0.00     0.00  void std::__do_alloc_on_move<std::allocator<DateTime*> >(std::allocator<DateTime*>&, std::allocator<DateTime*>&, std::integral_constant<bool, true>)
  0.00   2613.88     0.00        3     0.00     0.00  std::remove_reference<std::allocator<DateTime*>&>::type&& std::move<std::allocator<DateTime*>&>(std::allocator<DateTime*>&)
  0.00   2613.88     0.00        3     0.00     0.00  std::remove_reference<std::vector<DateTime*, std::allocator<DateTime*> >&>::type&& std::move<std::vector<DateTime*, std::allocator<DateTime*> >&>(std::vector<DateTime*, std::allocator<DateTime*> >&)
  0.00   2613.88     0.00        2     0.00     0.00  from_date_to_date(std::vector<DateTime*, std::allocator<DateTime*> >&, std::vector<DateTime*, std::allocator<DateTime*> > const&, DateTime const*, DateTime const*)
  0.00   2613.88     0.00        2     0.00     0.00  set_stream_from_filename(std::ostream&, std::basic_fstream<char, std::char_traits<char> >&, char const*)
  0.00   2613.88     0.00        2     0.00     0.00  DateTime::DateTime(DateTime const*)
  0.00   2613.88     0.00        2     0.00     0.00  __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >::operator+(long) const
  0.00   2613.88     0.00        2     0.00     0.00  void std::_Destroy_aux<true>::__destroy<__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > >(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >)
  0.00   2613.88     0.00        2     0.00     0.00  DateTime** std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**>(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**)
  0.00   2613.88     0.00        2     0.00     0.00  DateTime** std::vector<DateTime*, std::allocator<DateTime*> >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > > >(unsigned long, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >)
  0.00   2613.88     0.00        2     0.00     0.00  __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > std::__niter_wrap<__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**)
  0.00   2613.88     0.00        2     0.00     0.00  DateTime** std::__niter_wrap<DateTime**>(DateTime** const&, DateTime**)
  0.00   2613.88     0.00        2     0.00     0.00  __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > std::__copy_move_a2<false, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > >(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >)
  0.00   2613.88     0.00        2     0.00     0.00  DateTime** std::__copy_move_a2<false, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**>(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**)
  0.00   2613.88     0.00        2     0.00     0.00  DateTime** std::uninitialized_copy<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**>(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**)
  0.00   2613.88     0.00        2     0.00     0.00  DateTime** std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**, DateTime*>(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**, std::allocator<DateTime*>&)
  0.00   2613.88     0.00        2     0.00     0.00  __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > std::copy<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > >(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >)
  0.00   2613.88     0.00        2     0.00     0.00  DateTime** std::copy<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**>(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**)
  0.00   2613.88     0.00        2     0.00     0.00  void std::_Destroy<__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > >(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >)
  0.00   2613.88     0.00        2     0.00     0.00  void std::_Destroy<__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime*>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, std::allocator<DateTime*>&)
  0.00   2613.88     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z24set_stream_from_filenameRSoRSt13basic_fstreamIcSt11char_traitsIcEEPKc
  0.00   2613.88     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN8DateTimeC2Eiii
  0.00   2613.88     0.00        1     0.00     2.60  simulate_all()
  0.00   2613.88     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00   2613.88     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00   2613.88     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00   2613.88     0.00        1     0.00     0.00  IDerivative::IDerivative(double, int)
  0.00   2613.88     0.00        1     0.00     0.00  IDerivative::~IDerivative()
  0.00   2613.88     0.00        1     0.00     0.00  IMarketData::IMarketData(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, DateTime const*, DateTime const*)
  0.00   2613.88     0.00        1     0.00     0.00  IMarketData::~IMarketData()
  0.00   2613.88     0.00        1     0.00     0.00  InterestRate::InterestRate(DateTime*, std::vector<DateTime*, std::allocator<DateTime*> > const&, _PnlMat*)
  0.00   2613.88     0.00        1     0.00     0.00  HedgingPortfolio::HedgingPortfolio(double, _PnlVect const*, _PnlVect const*, InterestRate*, double)
  0.00   2613.88     0.00        1     0.00     0.00  HedgingPortfolio::~HedgingPortfolio()
  0.00   2613.88     0.00        1     0.00     0.00  BlackScholesModel::BlackScholesModel(int, int, InterestRate*, _PnlVect*)
  0.00   2613.88     0.00        1     0.00     0.00  BlackScholesModel::~BlackScholesModel()
  0.00   2613.88     0.00        1     0.00     0.01  HistoricalMarketData::set_Ocelia_data()
  0.00   2613.88     0.00        1     0.00     0.01  HistoricalMarketData::set_data()
  0.00   2613.88     0.00        1     0.00     0.00  HistoricalMarketData::HistoricalMarketData(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, DateTime const*, DateTime const*)
  0.00   2613.88     0.00        1     0.00     0.00  HistoricalMarketData::~HistoricalMarketData()
  0.00   2613.88     0.00        1     0.00     0.00  HistoricalMarketData::~HistoricalMarketData()
  0.00   2613.88     0.00        1     0.00     0.00  StandardMonteCarloPricer::StandardMonteCarloPricer(IModel*, IDerivative*, _PnlRng*, double, int)
  0.00   2613.88     0.00        1     0.00     0.00  StandardMonteCarloPricer::~StandardMonteCarloPricer()
  0.00   2613.88     0.00        1     0.00     0.00  StandardMonteCarloPricer::~StandardMonteCarloPricer()
  0.00   2613.88     0.00        1     0.00     0.00  IModel::IModel(int, int, InterestRate*, _PnlVect*)
  0.00   2613.88     0.00        1     0.00     0.00  IModel::~IModel()
  0.00   2613.88     0.00        1     0.00     0.00  Ocelia::init_indices(std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&)
  0.00   2613.88     0.00        1     0.00     0.00  Ocelia::Ocelia(double, int, int, double, _PnlVect*, InterestRate*)
  0.00   2613.88     0.00        1     0.00     0.00  Ocelia::~Ocelia()
  0.00   2613.88     0.00        1     0.00     0.00  Ocelia::~Ocelia()
  0.00   2613.88     0.00        1     0.00     0.00  IPricer::IPricer(IModel*, IDerivative*, _PnlRng*, double, int)
  0.00   2613.88     0.00        1     0.00     0.00  IPricer::~IPricer()
  0.00   2613.88     0.00        1     0.00     0.00  Ocelia::adjust_past(_PnlMat*) const

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2020 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.00% of 2613.88 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00 2613.82                 main [1]
                0.00 2595.28       1/1           simulate_all() [2]
                0.00   12.21       1/61          StandardMonteCarloPricer::price_and_delta(_PnlVect const*, double, double&, double&, _PnlVect*, _PnlVect*) [9]
                0.00    6.22       1/1           HistoricalMarketData::set_data() [28]
                0.08    0.00       1/1           BlackScholesModel::~BlackScholesModel() [48]
                0.02    0.00       1/1           InterestRate::~InterestRate() [51]
                0.00    0.01       3/3           parse_dates_file(std::vector<DateTime*, std::allocator<DateTime*> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, char) [52]
                0.00    0.00       1/1825        compute_sigma(_PnlMat*, _PnlMat const*, int, int) [35]
                0.00    0.00       1/5           get_prices_from_date(_PnlMat*, std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&, _PnlMat const*) [53]
                0.00    0.00       2/2           set_stream_from_filename(std::ostream&, std::basic_fstream<char, std::char_traits<char> >&, char const*) [56]
                0.00    0.00       1/1825        Ocelia::adjust_spot(_PnlVect*, double) const [46]
                0.00    0.00       1/1           Ocelia::adjust_past(_PnlMat*) const [57]
                0.00    0.00       1/273900001     Ocelia::payoff(_PnlMat const*) [4]
                0.00    0.00      49/1247689539     pnl_vect_int_get [21]
                0.00    0.00       1/1825        Ocelia::adjust_sigma(_PnlMat*) const [54]
                0.00    0.00      49/8345193262     pnl_vect_lget [22]
                0.00    0.00       1/1825        compute_volatility(_PnlVect*, _PnlMat const*) [55]
                0.00    0.00       1/231200001     Ocelia::get_annee_payoff() const [43]
                0.00    0.00       8/38374       DateTime::DateTime(int, int, int) [78]
                0.00    0.00       3/9           delete_date_vector(std::vector<DateTime*, std::allocator<DateTime*> >&) [140]
                0.00    0.00       2/3           get_indice_from_date(std::vector<DateTime*, std::allocator<DateTime*> > const&, DateTime const*) [165]
                0.00    0.00       2/75470       std::vector<DateTime*, std::allocator<DateTime*> >::size() const [74]
                0.00    0.00       1/1           HistoricalMarketData::HistoricalMarketData(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, DateTime const*, DateTime const*) [207]
                0.00    0.00       1/2           from_date_to_date(std::vector<DateTime*, std::allocator<DateTime*> >&, std::vector<DateTime*, std::allocator<DateTime*> > const&, DateTime const*, DateTime const*) [177]
                0.00    0.00       1/1           InterestRate::InterestRate(DateTime*, std::vector<DateTime*, std::allocator<DateTime*> > const&, _PnlMat*) [202]
                0.00    0.00       1/8           calcul_indices_dates(_PnlVectInt*, std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&) [143]
                0.00    0.00       1/1           BlackScholesModel::BlackScholesModel(int, int, InterestRate*, _PnlVect*) [205]
                0.00    0.00       1/1           Ocelia::Ocelia(double, int, int, double, _PnlVect*, InterestRate*) [216]
                0.00    0.00       1/1           Ocelia::init_indices(std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&) [215]
                0.00    0.00       1/1           StandardMonteCarloPricer::StandardMonteCarloPricer(IModel*, IDerivative*, _PnlRng*, double, int) [210]
                0.00    0.00       1/1           HedgingPortfolio::HedgingPortfolio(double, _PnlVect const*, _PnlVect const*, InterestRate*, double) [203]
                0.00    0.00       1/1           HistoricalMarketData::~HistoricalMarketData() [208]
                0.00    0.00       1/1           Ocelia::~Ocelia() [217]
                0.00    0.00       1/1           StandardMonteCarloPricer::~StandardMonteCarloPricer() [211]
                0.00    0.00       1/35239       DateTime::~DateTime() [85]
                0.00    0.00       1/1           HedgingPortfolio::~HedgingPortfolio() [204]
-----------------------------------------------
                0.00 2595.28       1/1           main [1]
[2]     99.3    0.00 2595.28       1         simulate_all() [2]
                2.30 1844.90    1824/1824        StandardMonteCarloPricer::price(_PnlVect const*, double, double&, double&) [3]
                0.22  732.36      60/61          StandardMonteCarloPricer::price_and_delta(_PnlVect const*, double, double&, double&, _PnlVect*, _PnlVect*) [9]
                0.00    3.43    1824/1825        compute_sigma(_PnlMat*, _PnlMat const*, int, int) [35]
                0.00    2.93    1825/3650        HedgingPortfolio::get_portfolio_value(double, _PnlVect const*) const [32]
                0.00    2.93    1825/1825        HedgingPortfolio::get_FinalPnL(double, double, _PnlVect const*) const [37]
                0.00    2.93    1825/3650        HedgingPortfolio::get_valeur_liquidative(double, _PnlVect const*) const [33]
                0.00    2.93    1825/1825        HedgingPortfolio::get_tracking_error(double, double, _PnlVect const*) const [38]
                0.00    0.19      60/60          HedgingPortfolio::rebalancing(double, _PnlVect const*, _PnlVect const*) [45]
                0.15    0.00    1824/1825        Ocelia::adjust_spot(_PnlVect*, double) const [46]
                0.00    0.00    1824/1825        Ocelia::adjust_sigma(_PnlMat*) const [54]
                0.00    0.00    1824/1825        compute_volatility(_PnlVect*, _PnlMat const*) [55]
                0.00    0.00    1824/1247689539     pnl_vect_int_get [21]
                0.00    0.00    1825/8271514397     pnl_mat_get [13]
                0.00    0.00     122/122         operator<<(std::ostream&, _PnlVect const*) [58]
                0.00    0.00    3711/3711        std::vector<DateTime*, std::allocator<DateTime*> >::operator[](unsigned long) [93]
                0.00    0.00    1887/1887        operator<<(std::ostream&, DateTime const*) [95]
                0.00    0.00    1825/68697       DateTime::compare(DateTime const*) const [76]
-----------------------------------------------
                2.30 1844.90    1824/1824        simulate_all() [2]
[3]     70.7    2.30 1844.90    1824         StandardMonteCarloPricer::price(_PnlVect const*, double, double&, double&) [3]
                3.27 1040.39 182400000/188500000     StandardMonteCarloPricer::add_price(double, double&, double&) [5]
              305.63  495.61 182400000/188500000     BlackScholesModel::asset(_PnlMat*, double, _PnlRng*, _PnlVect const*) [8]
                0.00    0.00    1824/2312        __gnu_cxx::__enable_if<std::__is_integer<int>::__value, double>::__type std::exp<int>(int) [94]
-----------------------------------------------
                0.00    0.00       1/273900001     main [1]
               19.05  464.36 85400000/273900001     StandardMonteCarloPricer::add_delta(double, _PnlVect*, _PnlVect*) [10]
               42.05 1024.97 188500000/273900001     StandardMonteCarloPricer::add_price(double, double&, double&) [5]
[4]     59.3   61.10 1489.33 273900001         Ocelia::payoff(_PnlMat const*) [4]
               44.46  694.54 1229172582/1708400286     Ocelia::compute_perfs_n_ans(_PnlVect*, _PnlMat const*, int) const [6]
                1.98  405.78 273900001/273900001     Ocelia::compute_flux_n_ans(_PnlMat const*, int) const [14]
                4.23  334.80 273900001/273900001     Ocelia::compute_nouveau_depart(_PnlMat const*) [15]
                3.54    0.00 1229172582/1434500285     are_all_positive(_PnlVect const*) [34]
-----------------------------------------------
                0.11   34.79 6100000/188500000     StandardMonteCarloPricer::price_and_delta(_PnlVect const*, double, double&, double&, _PnlVect*, _PnlVect*) [9]
                3.27 1040.39 182400000/188500000     StandardMonteCarloPricer::price(_PnlVect const*, double, double&, double&) [3]
[5]     41.3    3.38 1075.18 188500000         StandardMonteCarloPricer::add_price(double, double&, double&) [5]
               42.05 1024.97 188500000/273900001     Ocelia::payoff(_PnlMat const*) [4]
                3.51    3.16 188500000/383107420     InterestRate::get_domestic_rate() [25]
                1.49    0.00 188500000/231200001     Ocelia::get_annee_payoff() const [43]
-----------------------------------------------
                7.43  116.02 205327703/1708400286     Ocelia::compute_flux_n_ans(_PnlMat const*, int) const [14]
                9.91  154.77 273900001/1708400286     Ocelia::compute_nouveau_depart(_PnlMat const*) [15]
               44.46  694.54 1229172582/1708400286     Ocelia::payoff(_PnlMat const*) [4]
[6]     39.3   61.80  965.33 1708400286         Ocelia::compute_perfs_n_ans(_PnlVect*, _PnlMat const*, int) const [6]
              146.66  694.33 1708400286/1982300287     Ocelia::compute_valeurs_n_ans(_PnlVect*, _PnlMat const*, int) const [7]
               85.14    0.00 5077267696/26948375915     pnl_vect_get [12]
               39.20    0.00 2538633848/8345193262     pnl_vect_lget [22]
-----------------------------------------------
               23.51  111.32 273900001/1982300287     Ocelia::compute_nouveau_depart(_PnlMat const*) [15]
              146.66  694.33 1708400286/1982300287     Ocelia::compute_perfs_n_ans(_PnlVect*, _PnlMat const*, int) const [6]
[7]     37.3  170.18  805.65 1982300287         Ocelia::compute_valeurs_n_ans(_PnlVect*, _PnlMat const*, int) const [7]
              229.37  218.92 991300076/1247371180     Ocelia::get_foreign_index_market_value(_PnlMat const*, int, int) const [11]
              116.34  119.47 1982300287/1982300287     trunc(_PnlVect*, int) [17]
              106.24    0.00 991300076/1247689539     pnl_vect_int_get [21]
               15.31    0.00 991300076/8345193262     pnl_vect_lget [22]
-----------------------------------------------
               10.22   16.57 6100000/188500000     StandardMonteCarloPricer::price_and_delta(_PnlVect const*, double, double&, double&, _PnlVect*, _PnlVect*) [9]
              305.63  495.61 182400000/188500000     StandardMonteCarloPricer::price(_PnlVect const*, double, double&, double&) [3]
[8]     31.7  315.85  512.19 188500000         BlackScholesModel::asset(_PnlMat*, double, _PnlRng*, _PnlVect const*) [8]
              223.00    0.00 13298388672/26948375915     pnl_vect_get [12]
              171.83    0.00 3466861632/8271514397     pnl_mat_get [13]
               92.03    0.00 4786361632/7350807940     pnl_mat_lget [20]
                4.25   14.39 188500000/273900000     first_index_gte(_PnlVect const*, double) [24]
                3.51    3.16 188500000/383107420     InterestRate::get_domestic_rate() [25]
-----------------------------------------------
                0.00   12.21       1/61          main [1]
                0.22  732.36      60/61          simulate_all() [2]
[9]     28.5    0.22  744.57      61         StandardMonteCarloPricer::price_and_delta(_PnlVect const*, double, double&, double&, _PnlVect*, _PnlVect*) [9]
                1.93  680.94 6100000/6100000     StandardMonteCarloPricer::add_delta(double, _PnlVect*, _PnlVect*) [10]
                0.11   34.79 6100000/188500000     StandardMonteCarloPricer::add_price(double, double&, double&) [5]
               10.22   16.57 6100000/188500000     BlackScholesModel::asset(_PnlMat*, double, _PnlRng*, _PnlVect const*) [8]
                0.00    0.00    2135/26948375915     pnl_vect_get [12]
                0.00    0.00    1708/8345193262     pnl_vect_lget [22]
                0.00    0.00     488/2312        __gnu_cxx::__enable_if<std::__is_integer<int>::__value, double>::__type std::exp<int>(int) [94]
-----------------------------------------------
                1.93  680.94 6100000/6100000     StandardMonteCarloPricer::price_and_delta(_PnlVect const*, double, double&, double&, _PnlVect*, _PnlVect*) [9]
[10]    26.1    1.93  680.94 6100000         StandardMonteCarloPricer::add_delta(double, _PnlVect*, _PnlVect*) [10]
               19.05  464.36 85400000/273900001     Ocelia::payoff(_PnlMat const*) [4]
                9.82  185.84 85400000/85400000     BlackScholesModel::shift_asset(_PnlMat*, double, _PnlMat const*, int, double) const [18]
                1.32    0.00 85400000/8345193262     pnl_vect_lget [22]
                0.34    0.00 42700000/231200001     Ocelia::get_annee_payoff() const [43]
                0.11    0.10 6100000/383107420     InterestRate::get_domestic_rate() [25]
-----------------------------------------------
               59.25   56.55 256071104/1247371180     Ocelia::compute_perf_moyenne_panier(_PnlMat const*) const [16]
              229.37  218.92 991300076/1247371180     Ocelia::compute_valeurs_n_ans(_PnlVect*, _PnlMat const*, int) const [7]
[11]    21.6  288.62  275.47 1247371180         Ocelia::get_foreign_index_market_value(_PnlMat const*, int, int) const [11]
               74.80   76.79 935528385/935534007     InterestRate::compute_foreign_risk_free_asset(double, double, int) [19]
              108.19    0.00 2182899565/8271514397     pnl_mat_get [13]
               15.69    0.00 935528385/26948375915     pnl_vect_get [12]
-----------------------------------------------
                0.00    0.00     147/26948375915     Ocelia::adjust_past(_PnlMat*) const [57]
                0.00    0.00     854/26948375915     operator<<(std::ostream&, _PnlVect const*) [58]
                0.00    0.00    1260/26948375915     HedgingPortfolio::rebalancing(double, _PnlVect const*, _PnlVect const*) [45]
                0.00    0.00    2135/26948375915     StandardMonteCarloPricer::price_and_delta(_PnlVect const*, double, double&, double&, _PnlVect*, _PnlVect*) [9]
                0.00    0.00    5475/26948375915     Ocelia::adjust_spot(_PnlVect*, double) const [46]
                0.00    0.00  102200/26948375915     compute_covariance(_PnlMat const*, _PnlVect const*, int, int) [39]
                1.43    0.00 85400000/26948375915     BlackScholesModel::shift_asset(_PnlMat*, double, _PnlMat const*, int, double) const [18]
                4.29    0.00 256071104/26948375915     Ocelia::compute_perf_moyenne_panier(_PnlMat const*) const [16]
                6.42    0.00 383107420/26948375915     InterestRate::get_domestic_rate() [25]
               15.69    0.00 935528385/26948375915     Ocelia::get_foreign_index_market_value(_PnlMat const*, int, int) const [11]
               15.69    0.00 935534007/26948375915     InterestRate::get_foreign_rate(int) [23]
               18.37    0.00 1095600004/26948375915     Ocelia::compute_nouveau_depart(_PnlMat const*) [15]
               20.91    0.00 1247132704/26948375915     first_index_gte(_PnlVect const*, double) [24]
               60.94    0.00 3634233852/26948375915     trunc(_PnlVect*, int) [17]
               85.14    0.00 5077267696/26948375915     Ocelia::compute_perfs_n_ans(_PnlVect*, _PnlMat const*, int) const [6]
              223.00    0.00 13298388672/26948375915     BlackScholesModel::asset(_PnlMat*, double, _PnlRng*, _PnlVect const*) [8]
[12]    17.3  451.90    0.00 26948375915         pnl_vect_get [12]
-----------------------------------------------
                0.00    0.00     147/8271514397     Ocelia::adjust_past(_PnlMat*) const [57]
                0.00    0.00    1825/8271514397     simulate_all() [2]
                0.00    0.00   37903/8271514397     get_prices_from_date(_PnlMat*, std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&, _PnlMat const*) [53]
                0.00    0.00   38325/8271514397     Ocelia::adjust_sigma(_PnlMat*) const [54]
                0.63    0.00 12775000/8271514397     log_returns(_PnlMat*, _PnlMat const*, int, int) [44]
                2.53    0.00 51100000/8271514397     compute_covariance(_PnlMat const*, _PnlVect const*, int, int) [39]
              108.19    0.00 2182899565/8271514397     Ocelia::get_foreign_index_market_value(_PnlMat const*, int, int) const [11]
              126.78    0.00 2557800000/8271514397     BlackScholesModel::shift_asset(_PnlMat*, double, _PnlMat const*, int, double) const [18]
              171.83    0.00 3466861632/8271514397     BlackScholesModel::asset(_PnlMat*, double, _PnlRng*, _PnlVect const*) [8]
[13]    15.7  409.97    0.00 8271514397         pnl_mat_get [13]
-----------------------------------------------
                1.98  405.78 273900001/273900001     Ocelia::payoff(_PnlMat const*) [4]
[14]    15.6    1.98  405.78 273900001         Ocelia::compute_flux_n_ans(_PnlMat const*, int) const [14]
              134.20  147.54 205327703/205327703     Ocelia::compute_perf_moyenne_panier(_PnlMat const*) const [16]
                7.43  116.02 205327703/1708400286     Ocelia::compute_perfs_n_ans(_PnlVect*, _PnlMat const*, int) const [6]
                0.59    0.00 205327703/1434500285     are_all_positive(_PnlVect const*) [34]
-----------------------------------------------
                4.23  334.80 273900001/273900001     Ocelia::payoff(_PnlMat const*) [4]
[15]    13.0    4.23  334.80 273900001         Ocelia::compute_nouveau_depart(_PnlMat const*) [15]
                9.91  154.77 273900001/1708400286     Ocelia::compute_perfs_n_ans(_PnlVect*, _PnlMat const*, int) const [6]
               23.51  111.32 273900001/1982300287     Ocelia::compute_valeurs_n_ans(_PnlVect*, _PnlMat const*, int) const [7]
               18.37    0.00 1095600004/26948375915     pnl_vect_get [12]
               16.92    0.00 1095600004/8345193262     pnl_vect_lget [22]
-----------------------------------------------
              134.20  147.54 205327703/205327703     Ocelia::compute_flux_n_ans(_PnlMat const*, int) const [14]
[16]    10.8  134.20  147.54 205327703         Ocelia::compute_perf_moyenne_panier(_PnlMat const*) const [16]
               59.25   56.55 256071104/1247371180     Ocelia::get_foreign_index_market_value(_PnlMat const*, int, int) const [11]
               27.44    0.00 256071104/1247689539     pnl_vect_int_get [21]
                4.29    0.00 256071104/26948375915     pnl_vect_get [12]
-----------------------------------------------
              116.34  119.47 1982300287/1982300287     Ocelia::compute_valeurs_n_ans(_PnlVect*, _PnlMat const*, int) const [7]
[17]     9.0  116.34  119.47 1982300287         trunc(_PnlVect*, int) [17]
               60.94    0.00 3634233852/26948375915     pnl_vect_get [12]
               56.11    0.00 3634233852/8345193262     pnl_vect_lget [22]
                2.41    0.00 1982300287/1982300287     __gnu_cxx::__promote_2<int, int, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type>::__type std::pow<int, int>(int, int) [40]
-----------------------------------------------
                9.82  185.84 85400000/85400000     StandardMonteCarloPricer::add_delta(double, _PnlVect*, _PnlVect*) [10]
[18]     7.5    9.82  185.84 85400000         BlackScholesModel::shift_asset(_PnlMat*, double, _PnlMat const*, int, double) const [18]
              126.78    0.00 2557800000/8271514397     pnl_mat_get [13]
               49.18    0.00 2557800000/7350807940     pnl_mat_lget [20]
                1.92    6.52 85400000/273900000     first_index_gte(_PnlVect const*, double) [24]
                1.43    0.00 85400000/26948375915     pnl_vect_get [12]
-----------------------------------------------
                0.00    0.00     147/935534007     Ocelia::adjust_past(_PnlMat*) const [57]
                0.00    0.00    5475/935534007     Ocelia::adjust_spot(_PnlVect*, double) const [46]
               74.80   76.79 935528385/935534007     Ocelia::get_foreign_index_market_value(_PnlMat const*, int, int) const [11]
[19]     5.8   74.80   76.79 935534007         InterestRate::compute_foreign_risk_free_asset(double, double, int) [19]
               61.11   15.69 935534007/935534007     InterestRate::get_foreign_rate(int) [23]
-----------------------------------------------
                0.00    0.00     294/7350807940     Ocelia::adjust_past(_PnlMat*) const [57]
                0.00    0.00   37903/7350807940     get_prices_from_date(_PnlMat*, std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&, _PnlMat const*) [53]
                0.00    0.00   38325/7350807940     Ocelia::adjust_sigma(_PnlMat*) const [54]
                0.00    0.00   89425/7350807940     compute_covariances(_PnlMat*, _PnlMat const*, int, int) [36]
                0.00    0.00   92861/7350807940     MarketDataFeed::set_data() [29]
                0.12    0.00 6387500/7350807940     log_returns(_PnlMat*, _PnlMat const*, int, int) [44]
               49.18    0.00 2557800000/7350807940     BlackScholesModel::shift_asset(_PnlMat*, double, _PnlMat const*, int, double) const [18]
               92.03    0.00 4786361632/7350807940     BlackScholesModel::asset(_PnlMat*, double, _PnlRng*, _PnlVect const*) [8]
[20]     5.4  141.35    0.00 7350807940         pnl_mat_lget [20]
-----------------------------------------------
                0.00    0.00      49/1247689539     main [1]
                0.00    0.00    1824/1247689539     simulate_all() [2]
                0.00    0.00   37903/1247689539     get_prices_from_date(_PnlMat*, std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&, _PnlMat const*) [53]
                0.01    0.00   92861/1247689539     MarketDataFeed::set_data() [29]
                0.02    0.00  185722/1247689539     has_no_index_value_null(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*, _PnlVectInt const*) [47]
               27.44    0.00 256071104/1247689539     Ocelia::compute_perf_moyenne_panier(_PnlMat const*) const [16]
              106.24    0.00 991300076/1247689539     Ocelia::compute_valeurs_n_ans(_PnlVect*, _PnlMat const*, int) const [7]
[21]     5.1  133.72    0.00 1247689539         pnl_vect_int_get [21]
-----------------------------------------------
                0.00    0.00      49/8345193262     main [1]
                0.00    0.00    1708/8345193262     StandardMonteCarloPricer::price_and_delta(_PnlVect const*, double, double&, double&, _PnlVect*, _PnlVect*) [9]
                0.00    0.00   10950/8345193262     Ocelia::adjust_spot(_PnlVect*, double) const [46]
                0.00    0.00   12775/8345193262     compute_volatility(_PnlVect*, _PnlMat const*) [55]
                1.32    0.00 85400000/8345193262     StandardMonteCarloPricer::add_delta(double, _PnlVect*, _PnlVect*) [10]
               15.31    0.00 991300076/8345193262     Ocelia::compute_valeurs_n_ans(_PnlVect*, _PnlMat const*, int) const [7]
               16.92    0.00 1095600004/8345193262     Ocelia::compute_nouveau_depart(_PnlMat const*) [15]
               39.20    0.00 2538633848/8345193262     Ocelia::compute_perfs_n_ans(_PnlVect*, _PnlMat const*, int) const [6]
               56.11    0.00 3634233852/8345193262     trunc(_PnlVect*, int) [17]
[22]     4.9  128.85    0.00 8345193262         pnl_vect_lget [22]
-----------------------------------------------
               61.11   15.69 935534007/935534007     InterestRate::compute_foreign_risk_free_asset(double, double, int) [19]
[23]     2.9   61.11   15.69 935534007         InterestRate::get_foreign_rate(int) [23]
               15.69    0.00 935534007/26948375915     pnl_vect_get [12]
-----------------------------------------------
                1.92    6.52 85400000/273900000     BlackScholesModel::shift_asset(_PnlMat*, double, _PnlMat const*, int, double) const [18]
                4.25   14.39 188500000/273900000     BlackScholesModel::asset(_PnlMat*, double, _PnlRng*, _PnlVect const*) [8]
[24]     1.0    6.17   20.91 273900000         first_index_gte(_PnlVect const*, double) [24]
               20.91    0.00 1247132704/26948375915     pnl_vect_get [12]
-----------------------------------------------
                0.00    0.00    7420/383107420     InterestRate::compute_domestic_risk_free_asset(double, double) [26]
                0.11    0.10 6100000/383107420     StandardMonteCarloPricer::add_delta(double, _PnlVect*, _PnlVect*) [10]
                3.51    3.16 188500000/383107420     BlackScholesModel::asset(_PnlMat*, double, _PnlRng*, _PnlVect const*) [8]
                3.51    3.16 188500000/383107420     StandardMonteCarloPricer::add_price(double, double&, double&) [5]
[25]     0.5    7.14    6.42 383107420         InterestRate::get_domestic_rate() [25]
                6.42    0.00 383107420/26948375915     pnl_vect_get [12]
-----------------------------------------------
                0.19    0.00     120/7420        HedgingPortfolio::rebalancing(double, _PnlVect const*, _PnlVect const*) [45]
                5.87    0.00    3650/7420        HedgingPortfolio::get_portfolio_value(double, _PnlVect const*) const [32]
                5.87    0.00    3650/7420        HedgingPortfolio::get_valeur_liquidative(double, _PnlVect const*) const [33]
[26]     0.5   11.92    0.00    7420         InterestRate::compute_domestic_risk_free_asset(double, double) [26]
                0.00    0.00    7420/383107420     InterestRate::get_domestic_rate() [25]
-----------------------------------------------
                0.00    6.22       1/1           HistoricalMarketData::set_data() [28]
[27]     0.2    0.00    6.22       1         HistoricalMarketData::set_Ocelia_data() [27]
                0.00    6.21       4/4           MarketDataFeed::set_data() [29]
                0.00    0.01       4/5           get_prices_from_date(_PnlMat*, std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&, _PnlMat const*) [53]
                0.00    0.00      12/12681       pnl_vect_int_lget [59]
                0.00    0.00       4/4           MarketDataFeed::MarketDataFeed(_PnlVectInt*, unsigned int, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [151]
                0.00    0.00       4/13          std::vector<DateTime*, std::allocator<DateTime*> >::~vector() [139]
                0.00    0.00       4/4           MarketDataFeed::~MarketDataFeed() [152]
                0.00    0.00       3/4           std::vector<DateTime*, std::allocator<DateTime*> >::operator=(std::vector<DateTime*, std::allocator<DateTime*> > const&) [161]
                0.00    0.00       3/3           same_dates(std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&) [164]
                0.00    0.00       3/3           std::vector<DateTime*, std::allocator<DateTime*> >::operator=(std::vector<DateTime*, std::allocator<DateTime*> >&&) [172]
                0.00    0.00       1/2           from_date_to_date(std::vector<DateTime*, std::allocator<DateTime*> >&, std::vector<DateTime*, std::allocator<DateTime*> > const&, DateTime const*, DateTime const*) [177]
                0.00    0.00       1/14          std::vector<DateTime*, std::allocator<DateTime*> >::vector() [138]
                0.00    0.00       1/9           delete_date_vector(std::vector<DateTime*, std::allocator<DateTime*> >&) [140]
-----------------------------------------------
                0.00    6.22       1/1           main [1]
[28]     0.2    0.00    6.22       1         HistoricalMarketData::set_data() [28]
                0.00    6.22       1/1           HistoricalMarketData::set_Ocelia_data() [27]
-----------------------------------------------
                0.00    6.21       4/4           HistoricalMarketData::set_Ocelia_data() [27]
[29]     0.2    0.00    6.21       4         MarketDataFeed::set_data() [29]
                0.00    2.08       4/4           MarketDataFeed::get_number_valid_data() const [41]
                0.04    1.99   28876/86728       split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char) [30]
                0.00    2.04   28876/28976       parse_date_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char) [42]
                0.04    0.01   28876/57752       has_no_index_value_null(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*, _PnlVectInt const*) [47]
                0.01    0.00   92861/1247689539     pnl_vect_int_get [21]
                0.00    0.00   92861/7350807940     pnl_mat_lget [20]
                0.00    0.00   28876/38366       std::vector<DateTime*, std::allocator<DateTime*> >::push_back(DateTime*&&) [82]
-----------------------------------------------
                0.04    1.99   28876/86728       MarketDataFeed::get_number_valid_data() const [41]
                0.04    1.99   28876/86728       MarketDataFeed::set_data() [29]
                0.04    2.00   28976/86728       parse_date_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char) [42]
[30]     0.2    0.13    5.99   86728         split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char) [30]
                5.99    0.00   86728/86730       std::operator|(std::_Ios_Openmode, std::_Ios_Openmode) [31]
-----------------------------------------------
                0.00    0.00       2/86730       set_stream_from_filename(std::ostream&, std::basic_fstream<char, std::char_traits<char> >&, char const*) [56]
                5.99    0.00   86728/86730       split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char) [30]
[31]     0.2    5.99    0.00   86730         std::operator|(std::_Ios_Openmode, std::_Ios_Openmode) [31]
-----------------------------------------------
                0.00    2.93    1825/3650        simulate_all() [2]
                0.00    2.93    1825/3650        HedgingPortfolio::get_tracking_error(double, double, _PnlVect const*) const [38]
[32]     0.2    0.00    5.87    3650         HedgingPortfolio::get_portfolio_value(double, _PnlVect const*) const [32]
                5.87    0.00    3650/7420        InterestRate::compute_domestic_risk_free_asset(double, double) [26]
-----------------------------------------------
                0.00    2.93    1825/3650        simulate_all() [2]
                0.00    2.93    1825/3650        HedgingPortfolio::get_FinalPnL(double, double, _PnlVect const*) const [37]
[33]     0.2    0.00    5.87    3650         HedgingPortfolio::get_valeur_liquidative(double, _PnlVect const*) const [33]
                5.87    0.00    3650/7420        InterestRate::compute_domestic_risk_free_asset(double, double) [26]
-----------------------------------------------
                0.59    0.00 205327703/1434500285     Ocelia::compute_flux_n_ans(_PnlMat const*, int) const [14]
                3.54    0.00 1229172582/1434500285     Ocelia::payoff(_PnlMat const*) [4]
[34]     0.2    4.13    0.00 1434500285         are_all_positive(_PnlVect const*) [34]
-----------------------------------------------
                0.00    0.00       1/1825        main [1]
                0.00    3.43    1824/1825        simulate_all() [2]
[35]     0.1    0.00    3.43    1825         compute_sigma(_PnlMat*, _PnlMat const*, int, int) [35]
                0.00    3.43    1825/1825        compute_covariances(_PnlMat*, _PnlMat const*, int, int) [36]
-----------------------------------------------
                0.00    3.43    1825/1825        compute_sigma(_PnlMat*, _PnlMat const*, int, int) [35]
[36]     0.1    0.00    3.43    1825         compute_covariances(_PnlMat*, _PnlMat const*, int, int) [36]
                0.04    2.53   51100/51100       compute_covariance(_PnlMat const*, _PnlVect const*, int, int) [39]
                0.10    0.76    1825/1825        log_returns(_PnlMat*, _PnlMat const*, int, int) [44]
                0.00    0.00   89425/7350807940     pnl_mat_lget [20]
                0.00    0.00    1825/1825        means(_PnlVect*, _PnlMat const*) [96]
-----------------------------------------------
                0.00    2.93    1825/1825        simulate_all() [2]
[37]     0.1    0.00    2.93    1825         HedgingPortfolio::get_FinalPnL(double, double, _PnlVect const*) const [37]
                0.00    2.93    1825/3650        HedgingPortfolio::get_valeur_liquidative(double, _PnlVect const*) const [33]
-----------------------------------------------
                0.00    2.93    1825/1825        simulate_all() [2]
[38]     0.1    0.00    2.93    1825         HedgingPortfolio::get_tracking_error(double, double, _PnlVect const*) const [38]
                0.00    2.93    1825/3650        HedgingPortfolio::get_portfolio_value(double, _PnlVect const*) const [32]
-----------------------------------------------
                0.04    2.53   51100/51100       compute_covariances(_PnlMat*, _PnlMat const*, int, int) [36]
[39]     0.1    0.04    2.53   51100         compute_covariance(_PnlMat const*, _PnlVect const*, int, int) [39]
                2.53    0.00 51100000/8271514397     pnl_mat_get [13]
                0.00    0.00  102200/26948375915     pnl_vect_get [12]
-----------------------------------------------
                2.41    0.00 1982300287/1982300287     trunc(_PnlVect*, int) [17]
[40]     0.1    2.41    0.00 1982300287         __gnu_cxx::__promote_2<int, int, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type>::__type std::pow<int, int>(int, int) [40]
-----------------------------------------------
                0.00    2.08       4/4           MarketDataFeed::set_data() [29]
[41]     0.1    0.00    2.08       4         MarketDataFeed::get_number_valid_data() const [41]
                0.04    1.99   28876/86728       split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char) [30]
                0.04    0.01   28876/57752       has_no_index_value_null(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*, _PnlVectInt const*) [47]
-----------------------------------------------
                0.00    0.01     100/28976       parse_dates_file(std::vector<DateTime*, std::allocator<DateTime*> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, char) [52]
                0.00    2.04   28876/28976       MarketDataFeed::set_data() [29]
[42]     0.1    0.00    2.04   28976         parse_date_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char) [42]
                0.04    2.00   28976/86728       split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char) [30]
                0.00    0.00   86928/86928       std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int) [70]
                0.00    0.00   28976/38374       DateTime::DateTime(int, int, int) [78]
-----------------------------------------------
                0.00    0.00       1/231200001     main [1]
                0.34    0.00 42700000/231200001     StandardMonteCarloPricer::add_delta(double, _PnlVect*, _PnlVect*) [10]
                1.49    0.00 188500000/231200001     StandardMonteCarloPricer::add_price(double, double&, double&) [5]
[43]     0.1    1.83    0.00 231200001         Ocelia::get_annee_payoff() const [43]
-----------------------------------------------
                0.10    0.76    1825/1825        compute_covariances(_PnlMat*, _PnlMat const*, int, int) [36]
[44]     0.0    0.10    0.76    1825         log_returns(_PnlMat*, _PnlMat const*, int, int) [44]
                0.63    0.00 12775000/8271514397     pnl_mat_get [13]
                0.12    0.00 6387500/7350807940     pnl_mat_lget [20]
-----------------------------------------------
                0.00    0.19      60/60          simulate_all() [2]
[45]     0.0    0.00    0.19      60         HedgingPortfolio::rebalancing(double, _PnlVect const*, _PnlVect const*) [45]
                0.19    0.00     120/7420        InterestRate::compute_domestic_risk_free_asset(double, double) [26]
                0.00    0.00    1260/26948375915     pnl_vect_get [12]
-----------------------------------------------
                0.00    0.00       1/1825        main [1]
                0.15    0.00    1824/1825        simulate_all() [2]
[46]     0.0    0.15    0.00    1825         Ocelia::adjust_spot(_PnlVect*, double) const [46]
                0.00    0.00    5475/935534007     InterestRate::compute_foreign_risk_free_asset(double, double, int) [19]
                0.00    0.00   10950/8345193262     pnl_vect_lget [22]
                0.00    0.00    5475/26948375915     pnl_vect_get [12]
-----------------------------------------------
                0.04    0.01   28876/57752       MarketDataFeed::get_number_valid_data() const [41]
                0.04    0.01   28876/57752       MarketDataFeed::set_data() [29]
[47]     0.0    0.07    0.02   57752         has_no_index_value_null(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*, _PnlVectInt const*) [47]
                0.02    0.00  185722/1247689539     pnl_vect_int_get [21]
                0.00    0.00  185722/185722      bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*) [66]
-----------------------------------------------
                0.08    0.00       1/1           main [1]
[48]     0.0    0.08    0.00       1         BlackScholesModel::~BlackScholesModel() [48]
                0.00    0.00       1/1           BlackScholesModel::~BlackScholesModel() [206]
-----------------------------------------------
                0.06    0.00       1/1           __libc_csu_init [50]
[49]     0.0    0.06    0.00       1         _GLOBAL__sub_I__Z5splitPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS4_c [49]
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [196]
-----------------------------------------------
                                                 <spontaneous>
[50]     0.0    0.00    0.06                 __libc_csu_init [50]
                0.06    0.00       1/1           _GLOBAL__sub_I__Z5splitPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS4_c [49]
                0.00    0.00       1/1           _GLOBAL__sub_I__ZN8DateTimeC2Eiii [194]
                0.00    0.00       1/1           _GLOBAL__sub_I__Z24set_stream_from_filenameRSoRSt13basic_fstreamIcSt11char_traitsIcEEPKc [193]
-----------------------------------------------
                0.02    0.00       1/1           main [1]
[51]     0.0    0.02    0.00       1         InterestRate::~InterestRate() [51]
                0.00    0.00       1/13          std::vector<DateTime*, std::allocator<DateTime*> >::~vector() [139]
-----------------------------------------------
                0.00    0.01       3/3           main [1]
[52]     0.0    0.00    0.01       3         parse_dates_file(std::vector<DateTime*, std::allocator<DateTime*> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, char) [52]
                0.00    0.01     100/28976       parse_date_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char) [42]
                0.00    0.00     100/38366       std::vector<DateTime*, std::allocator<DateTime*> >::push_back(DateTime*&&) [82]
-----------------------------------------------
                0.00    0.00       1/5           main [1]
                0.00    0.01       4/5           HistoricalMarketData::set_Ocelia_data() [27]
[53]     0.0    0.00    0.01       5         get_prices_from_date(_PnlMat*, std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&, _PnlMat const*) [53]
                0.00    0.00   37903/1247689539     pnl_vect_int_get [21]
                0.00    0.00   37903/8271514397     pnl_mat_get [13]
                0.00    0.00   37903/7350807940     pnl_mat_lget [20]
                0.00    0.00       5/8           calcul_indices_dates(_PnlVectInt*, std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&) [143]
-----------------------------------------------
                0.00    0.00       1/1825        main [1]
                0.00    0.00    1824/1825        simulate_all() [2]
[54]     0.0    0.00    0.00    1825         Ocelia::adjust_sigma(_PnlMat*) const [54]
                0.00    0.00   38325/8271514397     pnl_mat_get [13]
                0.00    0.00   38325/7350807940     pnl_mat_lget [20]
-----------------------------------------------
                0.00    0.00       1/1825        main [1]
                0.00    0.00    1824/1825        simulate_all() [2]
[55]     0.0    0.00    0.00    1825         compute_volatility(_PnlVect*, _PnlMat const*) [55]
                0.00    0.00   12775/8345193262     pnl_vect_lget [22]
-----------------------------------------------
                0.00    0.00       2/2           main [1]
[56]     0.0    0.00    0.00       2         set_stream_from_filename(std::ostream&, std::basic_fstream<char, std::char_traits<char> >&, char const*) [56]
                0.00    0.00       2/86730       std::operator|(std::_Ios_Openmode, std::_Ios_Openmode) [31]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[57]     0.0    0.00    0.00       1         Ocelia::adjust_past(_PnlMat*) const [57]
                0.00    0.00     147/935534007     InterestRate::compute_foreign_risk_free_asset(double, double, int) [19]
                0.00    0.00     147/8271514397     pnl_mat_get [13]
                0.00    0.00     294/7350807940     pnl_mat_lget [20]
                0.00    0.00     147/26948375915     pnl_vect_get [12]
-----------------------------------------------
                0.00    0.00     122/122         simulate_all() [2]
[58]     0.0    0.00    0.00     122         operator<<(std::ostream&, _PnlVect const*) [58]
                0.00    0.00     854/26948375915     pnl_vect_get [12]
-----------------------------------------------
                0.00    0.00      12/12681       HistoricalMarketData::set_Ocelia_data() [27]
                0.00    0.00   12669/12681       calcul_indices_dates(_PnlVectInt*, std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&) [143]
[59]     0.0    0.00    0.00   12681         pnl_vect_int_lget [59]
-----------------------------------------------
                0.00    0.00  185722/185722      has_no_index_value_null(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*, _PnlVectInt const*) [47]
[66]     0.0    0.00    0.00  185722         bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*) [66]
-----------------------------------------------
                0.00    0.00      36/128880      get_indices_from_date_dichotomic(std::vector<DateTime*, std::allocator<DateTime*> > const&, DateTime const*, int, int) [166]
                0.00    0.00   24630/128880      from_date_to_date(std::vector<DateTime*, std::allocator<DateTime*> >&, std::vector<DateTime*, std::allocator<DateTime*> > const&, DateTime const*, DateTime const*) [177]
                0.00    0.00   44918/128880      same_dates(std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&) [164]
                0.00    0.00   59296/128880      calcul_indices_dates(_PnlVectInt*, std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&) [143]
[67]     0.0    0.00    0.00  128880         std::vector<DateTime*, std::allocator<DateTime*> >::operator[](unsigned long) const [67]
-----------------------------------------------
                0.00    0.00     114/115212      void std::vector<DateTime*, std::allocator<DateTime*> >::_M_realloc_insert<DateTime*>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime*&&) [123]
                0.00    0.00   38366/115212      void std::vector<DateTime*, std::allocator<DateTime*> >::emplace_back<DateTime*>(DateTime*&&) [81]
                0.00    0.00   38366/115212      void std::allocator_traits<std::allocator<DateTime*> >::construct<DateTime*, DateTime*>(std::allocator<DateTime*>&, DateTime**, DateTime*&&) [80]
                0.00    0.00   38366/115212      void __gnu_cxx::new_allocator<DateTime*>::construct<DateTime*, DateTime*>(DateTime**, DateTime*&&) [79]
[68]     0.0    0.00    0.00  115212         DateTime*&& std::forward<DateTime*>(std::remove_reference<DateTime*>::type&) [68]
-----------------------------------------------
                0.00    0.00   86928/86928       std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int) [70]
[69]     0.0    0.00    0.00   86928         int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) [69]
                0.00    0.00   86928/86928       __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::_Save_errno() [72]
                0.00    0.00   86928/86928       __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Range_chk::_S_chk(long, std::integral_constant<bool, true>) [71]
                0.00    0.00   86928/86928       __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::~_Save_errno() [73]
-----------------------------------------------
                0.00    0.00   86928/86928       parse_date_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char) [42]
[70]     0.0    0.00    0.00   86928         std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int) [70]
                0.00    0.00   86928/86928       int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) [69]
-----------------------------------------------
                0.00    0.00   86928/86928       int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) [69]
[71]     0.0    0.00    0.00   86928         __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Range_chk::_S_chk(long, std::integral_constant<bool, true>) [71]
-----------------------------------------------
                0.00    0.00   86928/86928       int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) [69]
[72]     0.0    0.00    0.00   86928         __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::_Save_errno() [72]
-----------------------------------------------
                0.00    0.00   86928/86928       int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) [69]
[73]     0.0    0.00    0.00   86928         __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::~_Save_errno() [73]
-----------------------------------------------
                0.00    0.00       2/75470       main [1]
                0.00    0.00       3/75470       get_indice_from_date(std::vector<DateTime*, std::allocator<DateTime*> > const&, DateTime const*) [165]
                0.00    0.00       6/75470       std::vector<DateTime*, std::allocator<DateTime*> >::operator=(std::vector<DateTime*, std::allocator<DateTime*> > const&) [161]
                0.00    0.00     560/75470       std::vector<DateTime*, std::allocator<DateTime*> >::_M_check_len(unsigned long, char const*) const [121]
                0.00    0.00    9712/75470       from_date_to_date(std::vector<DateTime*, std::allocator<DateTime*> >&, std::vector<DateTime*, std::allocator<DateTime*> > const&, DateTime const*, DateTime const*) [177]
                0.00    0.00   29656/75470       calcul_indices_dates(_PnlVectInt*, std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&) [143]
                0.00    0.00   35531/75470       same_dates(std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&) [164]
[74]     0.0    0.00    0.00   75470         std::vector<DateTime*, std::allocator<DateTime*> >::size() const [74]
-----------------------------------------------
                0.00    0.00       4/71054       DateTime** std::__niter_base<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >) [162]
                0.00    0.00      52/71054       void std::vector<DateTime*, std::allocator<DateTime*> >::_M_realloc_insert<DateTime* const&>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime* const&) [127]
                0.00    0.00     228/71054       void std::vector<DateTime*, std::allocator<DateTime*> >::_M_realloc_insert<DateTime*>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime*&&) [123]
                0.00    0.00     280/71054       __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >::difference_type __gnu_cxx::operator-<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > const&, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > const&) [120]
                0.00    0.00   70490/71054       bool __gnu_cxx::operator!=<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > const&, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > const&) [84]
[75]     0.0    0.00    0.00   71054         __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >::base() const [75]
-----------------------------------------------
                0.00    0.00      36/68697       get_indices_from_date_dichotomic(std::vector<DateTime*, std::allocator<DateTime*> > const&, DateTime const*, int, int) [166]
                0.00    0.00    1825/68697       simulate_all() [2]
                0.00    0.00   17764/68697       same_dates(std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&) [164]
                0.00    0.00   19424/68697       from_date_to_date(std::vector<DateTime*, std::allocator<DateTime*> >&, std::vector<DateTime*, std::allocator<DateTime*> > const&, DateTime const*, DateTime const*) [177]
                0.00    0.00   29648/68697       calcul_indices_dates(_PnlVectInt*, std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&) [143]
[76]     0.0    0.00    0.00   68697         DateTime::compare(DateTime const*) const [76]
-----------------------------------------------
                0.00    0.00    5206/43572       void __gnu_cxx::new_allocator<DateTime*>::construct<DateTime*, DateTime* const&>(DateTime**, DateTime* const&) [90]
                0.00    0.00   38366/43572       void __gnu_cxx::new_allocator<DateTime*>::construct<DateTime*, DateTime*>(DateTime**, DateTime*&&) [79]
[77]     0.0    0.00    0.00   43572         operator new(unsigned long, void*) [77]
-----------------------------------------------
                0.00    0.00       8/38374       main [1]
                0.00    0.00    9390/38374       DateTime::copy() const [89]
                0.00    0.00   28976/38374       parse_date_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char) [42]
[78]     0.0    0.00    0.00   38374         DateTime::DateTime(int, int, int) [78]
-----------------------------------------------
                0.00    0.00   38366/38366       void std::allocator_traits<std::allocator<DateTime*> >::construct<DateTime*, DateTime*>(std::allocator<DateTime*>&, DateTime**, DateTime*&&) [80]
[79]     0.0    0.00    0.00   38366         void __gnu_cxx::new_allocator<DateTime*>::construct<DateTime*, DateTime*>(DateTime**, DateTime*&&) [79]
                0.00    0.00   38366/115212      DateTime*&& std::forward<DateTime*>(std::remove_reference<DateTime*>::type&) [68]
                0.00    0.00   38366/43572       operator new(unsigned long, void*) [77]
-----------------------------------------------
                0.00    0.00     114/38366       void std::vector<DateTime*, std::allocator<DateTime*> >::_M_realloc_insert<DateTime*>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime*&&) [123]
                0.00    0.00   38252/38366       void std::vector<DateTime*, std::allocator<DateTime*> >::emplace_back<DateTime*>(DateTime*&&) [81]
[80]     0.0    0.00    0.00   38366         void std::allocator_traits<std::allocator<DateTime*> >::construct<DateTime*, DateTime*>(std::allocator<DateTime*>&, DateTime**, DateTime*&&) [80]
                0.00    0.00   38366/115212      DateTime*&& std::forward<DateTime*>(std::remove_reference<DateTime*>::type&) [68]
                0.00    0.00   38366/38366       void __gnu_cxx::new_allocator<DateTime*>::construct<DateTime*, DateTime*>(DateTime**, DateTime*&&) [79]
-----------------------------------------------
                0.00    0.00   38366/38366       std::vector<DateTime*, std::allocator<DateTime*> >::push_back(DateTime*&&) [82]
[81]     0.0    0.00    0.00   38366         void std::vector<DateTime*, std::allocator<DateTime*> >::emplace_back<DateTime*>(DateTime*&&) [81]
                0.00    0.00   38366/115212      DateTime*&& std::forward<DateTime*>(std::remove_reference<DateTime*>::type&) [68]
                0.00    0.00   38252/38366       void std::allocator_traits<std::allocator<DateTime*> >::construct<DateTime*, DateTime*>(std::allocator<DateTime*>&, DateTime**, DateTime*&&) [80]
                0.00    0.00     114/151         std::vector<DateTime*, std::allocator<DateTime*> >::end() [113]
                0.00    0.00     114/114         void std::vector<DateTime*, std::allocator<DateTime*> >::_M_realloc_insert<DateTime*>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime*&&) [123]
-----------------------------------------------
                0.00    0.00     100/38366       parse_dates_file(std::vector<DateTime*, std::allocator<DateTime*> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, char) [52]
                0.00    0.00    9390/38366       same_dates(std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&) [164]
                0.00    0.00   28876/38366       MarketDataFeed::set_data() [29]
[82]     0.0    0.00    0.00   38366         std::vector<DateTime*, std::allocator<DateTime*> >::push_back(DateTime*&&) [82]
                0.00    0.00   38366/38366       std::remove_reference<DateTime*&>::type&& std::move<DateTime*&>(DateTime*&) [83]
                0.00    0.00   38366/38366       void std::vector<DateTime*, std::allocator<DateTime*> >::emplace_back<DateTime*>(DateTime*&&) [81]
-----------------------------------------------
                0.00    0.00   38366/38366       std::vector<DateTime*, std::allocator<DateTime*> >::push_back(DateTime*&&) [82]
[83]     0.0    0.00    0.00   38366         std::remove_reference<DateTime*&>::type&& std::move<DateTime*&>(DateTime*&) [83]
-----------------------------------------------
                0.00    0.00   35245/35245       delete_date_vector(std::vector<DateTime*, std::allocator<DateTime*> >&) [140]
[84]     0.0    0.00    0.00   35245         bool __gnu_cxx::operator!=<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > const&, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > const&) [84]
                0.00    0.00   70490/71054       __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >::base() const [75]
-----------------------------------------------
                0.00    0.00       1/35239       main [1]
                0.00    0.00       2/35239       IMarketData::~IMarketData() [201]
                0.00    0.00   35236/35239       delete_date_vector(std::vector<DateTime*, std::allocator<DateTime*> >&) [140]
[85]     0.0    0.00    0.00   35239         DateTime::~DateTime() [85]
-----------------------------------------------
                0.00    0.00   35236/35236       delete_date_vector(std::vector<DateTime*, std::allocator<DateTime*> >&) [140]
[86]     0.0    0.00    0.00   35236         __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >::operator++() [86]
-----------------------------------------------
                0.00    0.00   35236/35236       delete_date_vector(std::vector<DateTime*, std::allocator<DateTime*> >&) [140]
[87]     0.0    0.00    0.00   35236         __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >::operator*() const [87]
-----------------------------------------------
                0.00    0.00      26/10438       void std::vector<DateTime*, std::allocator<DateTime*> >::_M_realloc_insert<DateTime* const&>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime* const&) [127]
                0.00    0.00    5206/10438       void std::allocator_traits<std::allocator<DateTime*> >::construct<DateTime*, DateTime* const&>(std::allocator<DateTime*>&, DateTime**, DateTime* const&) [91]
                0.00    0.00    5206/10438       void __gnu_cxx::new_allocator<DateTime*>::construct<DateTime*, DateTime* const&>(DateTime**, DateTime* const&) [90]
[88]     0.0    0.00    0.00   10438         DateTime* const& std::forward<DateTime* const&>(std::remove_reference<DateTime* const&>::type&) [88]
-----------------------------------------------
                0.00    0.00    9390/9390        same_dates(std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&) [164]
[89]     0.0    0.00    0.00    9390         DateTime::copy() const [89]
                0.00    0.00    9390/38374       DateTime::DateTime(int, int, int) [78]
-----------------------------------------------
                0.00    0.00    5206/5206        void std::allocator_traits<std::allocator<DateTime*> >::construct<DateTime*, DateTime* const&>(std::allocator<DateTime*>&, DateTime**, DateTime* const&) [91]
[90]     0.0    0.00    0.00    5206         void __gnu_cxx::new_allocator<DateTime*>::construct<DateTime*, DateTime* const&>(DateTime**, DateTime* const&) [90]
                0.00    0.00    5206/10438       DateTime* const& std::forward<DateTime* const&>(std::remove_reference<DateTime* const&>::type&) [88]
                0.00    0.00    5206/43572       operator new(unsigned long, void*) [77]
-----------------------------------------------
                0.00    0.00      26/5206        void std::vector<DateTime*, std::allocator<DateTime*> >::_M_realloc_insert<DateTime* const&>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime* const&) [127]
                0.00    0.00    5180/5206        std::vector<DateTime*, std::allocator<DateTime*> >::push_back(DateTime* const&) [92]
[91]     0.0    0.00    0.00    5206         void std::allocator_traits<std::allocator<DateTime*> >::construct<DateTime*, DateTime* const&>(std::allocator<DateTime*>&, DateTime**, DateTime* const&) [91]
                0.00    0.00    5206/10438       DateTime* const& std::forward<DateTime* const&>(std::remove_reference<DateTime* const&>::type&) [88]
                0.00    0.00    5206/5206        void __gnu_cxx::new_allocator<DateTime*>::construct<DateTime*, DateTime* const&>(DateTime**, DateTime* const&) [90]
-----------------------------------------------
                0.00    0.00    5206/5206        from_date_to_date(std::vector<DateTime*, std::allocator<DateTime*> >&, std::vector<DateTime*, std::allocator<DateTime*> > const&, DateTime const*, DateTime const*) [177]
[92]     0.0    0.00    0.00    5206         std::vector<DateTime*, std::allocator<DateTime*> >::push_back(DateTime* const&) [92]
                0.00    0.00    5180/5206        void std::allocator_traits<std::allocator<DateTime*> >::construct<DateTime*, DateTime* const&>(std::allocator<DateTime*>&, DateTime**, DateTime* const&) [91]
                0.00    0.00      26/151         std::vector<DateTime*, std::allocator<DateTime*> >::end() [113]
                0.00    0.00      26/26          void std::vector<DateTime*, std::allocator<DateTime*> >::_M_realloc_insert<DateTime* const&>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime* const&) [127]
-----------------------------------------------
                0.00    0.00    3711/3711        simulate_all() [2]
[93]     0.0    0.00    0.00    3711         std::vector<DateTime*, std::allocator<DateTime*> >::operator[](unsigned long) [93]
-----------------------------------------------
                0.00    0.00     488/2312        StandardMonteCarloPricer::price_and_delta(_PnlVect const*, double, double&, double&, _PnlVect*, _PnlVect*) [9]
                0.00    0.00    1824/2312        StandardMonteCarloPricer::price(_PnlVect const*, double, double&, double&) [3]
[94]     0.0    0.00    0.00    2312         __gnu_cxx::__enable_if<std::__is_integer<int>::__value, double>::__type std::exp<int>(int) [94]
-----------------------------------------------
                0.00    0.00    1887/1887        simulate_all() [2]
[95]     0.0    0.00    0.00    1887         operator<<(std::ostream&, DateTime const*) [95]
-----------------------------------------------
                0.00    0.00    1825/1825        compute_covariances(_PnlMat*, _PnlMat const*, int, int) [36]
[96]     0.0    0.00    0.00    1825         means(_PnlVect*, _PnlMat const*) [96]
-----------------------------------------------
                0.00    0.00       2/842         DateTime** std::__copy_move_a2<false, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**>(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**) [186]
                0.00    0.00     840/842         DateTime** std::__relocate_a<DateTime**, DateTime**, std::allocator<DateTime*> >(DateTime**, DateTime**, DateTime**, std::allocator<DateTime*>&) [109]
[97]     0.0    0.00    0.00     842         DateTime** std::__niter_base<DateTime**>(DateTime**) [97]
-----------------------------------------------
                0.00    0.00     142/422         __gnu_cxx::new_allocator<DateTime*>::allocate(unsigned long, void const*) [116]
                0.00    0.00     280/422         std::allocator_traits<std::allocator<DateTime*> >::max_size(std::allocator<DateTime*> const&) [103]
[98]     0.0    0.00    0.00     422         __gnu_cxx::new_allocator<DateTime*>::max_size() const [98]
-----------------------------------------------
                0.00    0.00       2/318         DateTime** std::vector<DateTime*, std::allocator<DateTime*> >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > > >(unsigned long, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >) [182]
                0.00    0.00       4/318         std::vector<DateTime*, std::allocator<DateTime*> >::operator=(std::vector<DateTime*, std::allocator<DateTime*> > const&) [161]
                0.00    0.00       6/318         std::vector<DateTime*, std::allocator<DateTime*> >::_M_move_assign(std::vector<DateTime*, std::allocator<DateTime*> >&&, std::integral_constant<bool, true>) [170]
                0.00    0.00       9/318         std::vector<DateTime*, std::allocator<DateTime*> >::_M_erase_at_end(DateTime**) [141]
                0.00    0.00      17/318         std::vector<DateTime*, std::allocator<DateTime*> >::~vector() [139]
                0.00    0.00      52/318         void std::vector<DateTime*, std::allocator<DateTime*> >::_M_realloc_insert<DateTime* const&>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime* const&) [127]
                0.00    0.00     228/318         void std::vector<DateTime*, std::allocator<DateTime*> >::_M_realloc_insert<DateTime*>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime*&&) [123]
[99]     0.0    0.00    0.00     318         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_M_get_Tp_allocator() [99]
-----------------------------------------------
                0.00    0.00       2/304         __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >::operator+(long) const [179]
                0.00    0.00     151/304         std::vector<DateTime*, std::allocator<DateTime*> >::begin() [114]
                0.00    0.00     151/304         std::vector<DateTime*, std::allocator<DateTime*> >::end() [113]
[100]    0.0    0.00    0.00     304         __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >::__normal_iterator(DateTime** const&) [100]
-----------------------------------------------
                0.00    0.00       3/283         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::get_allocator() const [167]
                0.00    0.00     280/283         std::vector<DateTime*, std::allocator<DateTime*> >::max_size() const [102]
[101]    0.0    0.00    0.00     283         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_M_get_Tp_allocator() const [101]
-----------------------------------------------
                0.00    0.00     280/280         std::vector<DateTime*, std::allocator<DateTime*> >::_M_check_len(unsigned long, char const*) const [121]
[102]    0.0    0.00    0.00     280         std::vector<DateTime*, std::allocator<DateTime*> >::max_size() const [102]
                0.00    0.00     280/280         std::vector<DateTime*, std::allocator<DateTime*> >::_S_max_size(std::allocator<DateTime*> const&) [104]
                0.00    0.00     280/283         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_M_get_Tp_allocator() const [101]
-----------------------------------------------
                0.00    0.00     280/280         std::vector<DateTime*, std::allocator<DateTime*> >::_S_max_size(std::allocator<DateTime*> const&) [104]
[103]    0.0    0.00    0.00     280         std::allocator_traits<std::allocator<DateTime*> >::max_size(std::allocator<DateTime*> const&) [103]
                0.00    0.00     280/422         __gnu_cxx::new_allocator<DateTime*>::max_size() const [98]
-----------------------------------------------
                0.00    0.00     280/280         std::vector<DateTime*, std::allocator<DateTime*> >::max_size() const [102]
[104]    0.0    0.00    0.00     280         std::vector<DateTime*, std::allocator<DateTime*> >::_S_max_size(std::allocator<DateTime*> const&) [104]
                0.00    0.00     280/280         std::allocator_traits<std::allocator<DateTime*> >::max_size(std::allocator<DateTime*> const&) [103]
                0.00    0.00     280/280         unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&) [111]
-----------------------------------------------
                0.00    0.00      52/280         void std::vector<DateTime*, std::allocator<DateTime*> >::_M_realloc_insert<DateTime* const&>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime* const&) [127]
                0.00    0.00     228/280         void std::vector<DateTime*, std::allocator<DateTime*> >::_M_realloc_insert<DateTime*>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime*&&) [123]
[105]    0.0    0.00    0.00     280         std::vector<DateTime*, std::allocator<DateTime*> >::_S_relocate(DateTime**, DateTime**, DateTime**, std::allocator<DateTime*>&) [105]
                0.00    0.00     280/280         std::vector<DateTime*, std::allocator<DateTime*> >::_S_do_relocate(DateTime**, DateTime**, DateTime**, std::allocator<DateTime*>&, std::integral_constant<bool, true>) [106]
-----------------------------------------------
                0.00    0.00     280/280         std::vector<DateTime*, std::allocator<DateTime*> >::_S_relocate(DateTime**, DateTime**, DateTime**, std::allocator<DateTime*>&) [105]
[106]    0.0    0.00    0.00     280         std::vector<DateTime*, std::allocator<DateTime*> >::_S_do_relocate(DateTime**, DateTime**, DateTime**, std::allocator<DateTime*>&, std::integral_constant<bool, true>) [106]
                0.00    0.00     280/280         DateTime** std::__relocate_a<DateTime**, DateTime**, std::allocator<DateTime*> >(DateTime**, DateTime**, DateTime**, std::allocator<DateTime*>&) [109]
-----------------------------------------------
                0.00    0.00      52/280         void std::vector<DateTime*, std::allocator<DateTime*> >::_M_realloc_insert<DateTime* const&>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime* const&) [127]
                0.00    0.00     228/280         void std::vector<DateTime*, std::allocator<DateTime*> >::_M_realloc_insert<DateTime*>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime*&&) [123]
[107]    0.0    0.00    0.00     280         std::vector<DateTime*, std::allocator<DateTime*> >::_S_use_relocate() [107]
                0.00    0.00     280/280         std::vector<DateTime*, std::allocator<DateTime*> >::_S_nothrow_relocate(std::integral_constant<bool, true>) [108]
-----------------------------------------------
                0.00    0.00     280/280         std::vector<DateTime*, std::allocator<DateTime*> >::_S_use_relocate() [107]
[108]    0.0    0.00    0.00     280         std::vector<DateTime*, std::allocator<DateTime*> >::_S_nothrow_relocate(std::integral_constant<bool, true>) [108]
-----------------------------------------------
                0.00    0.00     280/280         std::vector<DateTime*, std::allocator<DateTime*> >::_S_do_relocate(DateTime**, DateTime**, DateTime**, std::allocator<DateTime*>&, std::integral_constant<bool, true>) [106]
[109]    0.0    0.00    0.00     280         DateTime** std::__relocate_a<DateTime**, DateTime**, std::allocator<DateTime*> >(DateTime**, DateTime**, DateTime**, std::allocator<DateTime*>&) [109]
                0.00    0.00     840/842         DateTime** std::__niter_base<DateTime**>(DateTime**) [97]
                0.00    0.00     280/280         std::enable_if<std::__is_bitwise_relocatable<DateTime*, void>::value, DateTime**>::type std::__relocate_a_1<DateTime*, DateTime*>(DateTime**, DateTime**, DateTime**, std::allocator<DateTime*>&) [110]
-----------------------------------------------
                0.00    0.00     280/280         DateTime** std::__relocate_a<DateTime**, DateTime**, std::allocator<DateTime*> >(DateTime**, DateTime**, DateTime**, std::allocator<DateTime*>&) [109]
[110]    0.0    0.00    0.00     280         std::enable_if<std::__is_bitwise_relocatable<DateTime*, void>::value, DateTime**>::type std::__relocate_a_1<DateTime*, DateTime*>(DateTime**, DateTime**, DateTime**, std::allocator<DateTime*>&) [110]
-----------------------------------------------
                0.00    0.00     280/280         std::vector<DateTime*, std::allocator<DateTime*> >::_S_max_size(std::allocator<DateTime*> const&) [104]
[111]    0.0    0.00    0.00     280         unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&) [111]
-----------------------------------------------
                0.00    0.00       2/159         std::vector<DateTime*, std::allocator<DateTime*> >::operator=(std::vector<DateTime*, std::allocator<DateTime*> > const&) [161]
                0.00    0.00      17/159         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::~_Vector_base() [133]
                0.00    0.00      26/159         void std::vector<DateTime*, std::allocator<DateTime*> >::_M_realloc_insert<DateTime* const&>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime* const&) [127]
                0.00    0.00     114/159         void std::vector<DateTime*, std::allocator<DateTime*> >::_M_realloc_insert<DateTime*>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime*&&) [123]
[112]    0.0    0.00    0.00     159         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_M_deallocate(DateTime**, unsigned long) [112]
                0.00    0.00     142/142         std::allocator_traits<std::allocator<DateTime*> >::deallocate(std::allocator<DateTime*>&, DateTime**, unsigned long) [118]
-----------------------------------------------
                0.00    0.00       2/151         std::vector<DateTime*, std::allocator<DateTime*> >::operator=(std::vector<DateTime*, std::allocator<DateTime*> > const&) [161]
                0.00    0.00       9/151         delete_date_vector(std::vector<DateTime*, std::allocator<DateTime*> >&) [140]
                0.00    0.00      26/151         std::vector<DateTime*, std::allocator<DateTime*> >::push_back(DateTime* const&) [92]
                0.00    0.00     114/151         void std::vector<DateTime*, std::allocator<DateTime*> >::emplace_back<DateTime*>(DateTime*&&) [81]
[113]    0.0    0.00    0.00     151         std::vector<DateTime*, std::allocator<DateTime*> >::end() [113]
                0.00    0.00     151/304         __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >::__normal_iterator(DateTime** const&) [100]
-----------------------------------------------
                0.00    0.00       2/151         std::vector<DateTime*, std::allocator<DateTime*> >::operator=(std::vector<DateTime*, std::allocator<DateTime*> > const&) [161]
                0.00    0.00       9/151         delete_date_vector(std::vector<DateTime*, std::allocator<DateTime*> >&) [140]
                0.00    0.00      26/151         void std::vector<DateTime*, std::allocator<DateTime*> >::_M_realloc_insert<DateTime* const&>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime* const&) [127]
                0.00    0.00     114/151         void std::vector<DateTime*, std::allocator<DateTime*> >::_M_realloc_insert<DateTime*>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime*&&) [123]
[114]    0.0    0.00    0.00     151         std::vector<DateTime*, std::allocator<DateTime*> >::begin() [114]
                0.00    0.00     151/304         __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >::__normal_iterator(DateTime** const&) [100]
-----------------------------------------------
                0.00    0.00     142/142         std::allocator_traits<std::allocator<DateTime*> >::deallocate(std::allocator<DateTime*>&, DateTime**, unsigned long) [118]
[115]    0.0    0.00    0.00     142         __gnu_cxx::new_allocator<DateTime*>::deallocate(DateTime**, unsigned long) [115]
-----------------------------------------------
                0.00    0.00     142/142         std::allocator_traits<std::allocator<DateTime*> >::allocate(std::allocator<DateTime*>&, unsigned long) [119]
[116]    0.0    0.00    0.00     142         __gnu_cxx::new_allocator<DateTime*>::allocate(unsigned long, void const*) [116]
                0.00    0.00     142/422         __gnu_cxx::new_allocator<DateTime*>::max_size() const [98]
-----------------------------------------------
                0.00    0.00       2/142         DateTime** std::vector<DateTime*, std::allocator<DateTime*> >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > > >(unsigned long, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >) [182]
                0.00    0.00      26/142         void std::vector<DateTime*, std::allocator<DateTime*> >::_M_realloc_insert<DateTime* const&>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime* const&) [127]
                0.00    0.00     114/142         void std::vector<DateTime*, std::allocator<DateTime*> >::_M_realloc_insert<DateTime*>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime*&&) [123]
[117]    0.0    0.00    0.00     142         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_M_allocate(unsigned long) [117]
                0.00    0.00     142/142         std::allocator_traits<std::allocator<DateTime*> >::allocate(std::allocator<DateTime*>&, unsigned long) [119]
-----------------------------------------------
                0.00    0.00     142/142         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_M_deallocate(DateTime**, unsigned long) [112]
[118]    0.0    0.00    0.00     142         std::allocator_traits<std::allocator<DateTime*> >::deallocate(std::allocator<DateTime*>&, DateTime**, unsigned long) [118]
                0.00    0.00     142/142         __gnu_cxx::new_allocator<DateTime*>::deallocate(DateTime**, unsigned long) [115]
-----------------------------------------------
                0.00    0.00     142/142         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_M_allocate(unsigned long) [117]
[119]    0.0    0.00    0.00     142         std::allocator_traits<std::allocator<DateTime*> >::allocate(std::allocator<DateTime*>&, unsigned long) [119]
                0.00    0.00     142/142         __gnu_cxx::new_allocator<DateTime*>::allocate(unsigned long, void const*) [116]
-----------------------------------------------
                0.00    0.00      26/140         void std::vector<DateTime*, std::allocator<DateTime*> >::_M_realloc_insert<DateTime* const&>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime* const&) [127]
                0.00    0.00     114/140         void std::vector<DateTime*, std::allocator<DateTime*> >::_M_realloc_insert<DateTime*>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime*&&) [123]
[120]    0.0    0.00    0.00     140         __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >::difference_type __gnu_cxx::operator-<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > const&, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > const&) [120]
                0.00    0.00     280/71054       __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >::base() const [75]
-----------------------------------------------
                0.00    0.00      26/140         void std::vector<DateTime*, std::allocator<DateTime*> >::_M_realloc_insert<DateTime* const&>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime* const&) [127]
                0.00    0.00     114/140         void std::vector<DateTime*, std::allocator<DateTime*> >::_M_realloc_insert<DateTime*>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime*&&) [123]
[121]    0.0    0.00    0.00     140         std::vector<DateTime*, std::allocator<DateTime*> >::_M_check_len(unsigned long, char const*) const [121]
                0.00    0.00     560/75470       std::vector<DateTime*, std::allocator<DateTime*> >::size() const [74]
                0.00    0.00     280/280         std::vector<DateTime*, std::allocator<DateTime*> >::max_size() const [102]
                0.00    0.00     140/140         unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&) [122]
-----------------------------------------------
                0.00    0.00     140/140         std::vector<DateTime*, std::allocator<DateTime*> >::_M_check_len(unsigned long, char const*) const [121]
[122]    0.0    0.00    0.00     140         unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&) [122]
-----------------------------------------------
                0.00    0.00     114/114         void std::vector<DateTime*, std::allocator<DateTime*> >::emplace_back<DateTime*>(DateTime*&&) [81]
[123]    0.0    0.00    0.00     114         void std::vector<DateTime*, std::allocator<DateTime*> >::_M_realloc_insert<DateTime*>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime*&&) [123]
                0.00    0.00     228/280         std::vector<DateTime*, std::allocator<DateTime*> >::_S_use_relocate() [107]
                0.00    0.00     228/318         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_M_get_Tp_allocator() [99]
                0.00    0.00     228/71054       __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >::base() const [75]
                0.00    0.00     228/280         std::vector<DateTime*, std::allocator<DateTime*> >::_S_relocate(DateTime**, DateTime**, DateTime**, std::allocator<DateTime*>&) [105]
                0.00    0.00     114/140         std::vector<DateTime*, std::allocator<DateTime*> >::_M_check_len(unsigned long, char const*) const [121]
                0.00    0.00     114/151         std::vector<DateTime*, std::allocator<DateTime*> >::begin() [114]
                0.00    0.00     114/140         __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >::difference_type __gnu_cxx::operator-<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > const&, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > const&) [120]
                0.00    0.00     114/142         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_M_allocate(unsigned long) [117]
                0.00    0.00     114/115212      DateTime*&& std::forward<DateTime*>(std::remove_reference<DateTime*>::type&) [68]
                0.00    0.00     114/38366       void std::allocator_traits<std::allocator<DateTime*> >::construct<DateTime*, DateTime*>(std::allocator<DateTime*>&, DateTime**, DateTime*&&) [80]
                0.00    0.00     114/159         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_M_deallocate(DateTime**, unsigned long) [112]
-----------------------------------------------
                0.00    0.00      28/28          void std::_Destroy<DateTime**>(DateTime**, DateTime**) [125]
[124]    0.0    0.00    0.00      28         void std::_Destroy_aux<true>::__destroy<DateTime**>(DateTime**, DateTime**) [124]
-----------------------------------------------
                0.00    0.00      28/28          void std::_Destroy<DateTime**, DateTime*>(DateTime**, DateTime**, std::allocator<DateTime*>&) [126]
[125]    0.0    0.00    0.00      28         void std::_Destroy<DateTime**>(DateTime**, DateTime**) [125]
                0.00    0.00      28/28          void std::_Destroy_aux<true>::__destroy<DateTime**>(DateTime**, DateTime**) [124]
-----------------------------------------------
                0.00    0.00       2/28          std::vector<DateTime*, std::allocator<DateTime*> >::operator=(std::vector<DateTime*, std::allocator<DateTime*> > const&) [161]
                0.00    0.00       9/28          std::vector<DateTime*, std::allocator<DateTime*> >::_M_erase_at_end(DateTime**) [141]
                0.00    0.00      17/28          std::vector<DateTime*, std::allocator<DateTime*> >::~vector() [139]
[126]    0.0    0.00    0.00      28         void std::_Destroy<DateTime**, DateTime*>(DateTime**, DateTime**, std::allocator<DateTime*>&) [126]
                0.00    0.00      28/28          void std::_Destroy<DateTime**>(DateTime**, DateTime**) [125]
-----------------------------------------------
                0.00    0.00      26/26          std::vector<DateTime*, std::allocator<DateTime*> >::push_back(DateTime* const&) [92]
[127]    0.0    0.00    0.00      26         void std::vector<DateTime*, std::allocator<DateTime*> >::_M_realloc_insert<DateTime* const&>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime* const&) [127]
                0.00    0.00      52/280         std::vector<DateTime*, std::allocator<DateTime*> >::_S_use_relocate() [107]
                0.00    0.00      52/318         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_M_get_Tp_allocator() [99]
                0.00    0.00      52/71054       __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >::base() const [75]
                0.00    0.00      52/280         std::vector<DateTime*, std::allocator<DateTime*> >::_S_relocate(DateTime**, DateTime**, DateTime**, std::allocator<DateTime*>&) [105]
                0.00    0.00      26/140         std::vector<DateTime*, std::allocator<DateTime*> >::_M_check_len(unsigned long, char const*) const [121]
                0.00    0.00      26/151         std::vector<DateTime*, std::allocator<DateTime*> >::begin() [114]
                0.00    0.00      26/140         __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >::difference_type __gnu_cxx::operator-<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > const&, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > const&) [120]
                0.00    0.00      26/142         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_M_allocate(unsigned long) [117]
                0.00    0.00      26/10438       DateTime* const& std::forward<DateTime* const&>(std::remove_reference<DateTime* const&>::type&) [88]
                0.00    0.00      26/5206        void std::allocator_traits<std::allocator<DateTime*> >::construct<DateTime*, DateTime* const&>(std::allocator<DateTime*>&, DateTime**, DateTime* const&) [91]
                0.00    0.00      26/159         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_M_deallocate(DateTime**, unsigned long) [112]
-----------------------------------------------
                0.00    0.00       3/23          std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl::_Vector_impl(std::allocator<DateTime*> const&) [168]
                0.00    0.00       6/23          std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl_data::_M_swap_data(std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl_data&) [150]
                0.00    0.00      14/23          std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl::_Vector_impl() [136]
[128]    0.0    0.00    0.00      23         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl_data::_Vector_impl_data() [128]
-----------------------------------------------
                0.00    0.00      20/20          std::allocator<DateTime*>::~allocator() [130]
[129]    0.0    0.00    0.00      20         __gnu_cxx::new_allocator<DateTime*>::~new_allocator() [129]
-----------------------------------------------
                0.00    0.00       3/20          std::vector<DateTime*, std::allocator<DateTime*> >::_M_move_assign(std::vector<DateTime*, std::allocator<DateTime*> >&&, std::integral_constant<bool, true>) [170]
                0.00    0.00      17/20          std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl::~_Vector_impl() [132]
[130]    0.0    0.00    0.00      20         std::allocator<DateTime*>::~allocator() [130]
                0.00    0.00      20/20          __gnu_cxx::new_allocator<DateTime*>::~new_allocator() [129]
-----------------------------------------------
                0.00    0.00      18/18          std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl_data::_M_swap_data(std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl_data&) [150]
[131]    0.0    0.00    0.00      18         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl_data::_M_copy_data(std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl_data const&) [131]
-----------------------------------------------
                0.00    0.00      17/17          std::_Vector_base<DateTime*, std::allocator<DateTime*> >::~_Vector_base() [133]
[132]    0.0    0.00    0.00      17         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl::~_Vector_impl() [132]
                0.00    0.00      17/20          std::allocator<DateTime*>::~allocator() [130]
-----------------------------------------------
                0.00    0.00      17/17          std::vector<DateTime*, std::allocator<DateTime*> >::~vector() [139]
[133]    0.0    0.00    0.00      17         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::~_Vector_base() [133]
                0.00    0.00      17/159         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_M_deallocate(DateTime**, unsigned long) [112]
                0.00    0.00      17/17          std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl::~_Vector_impl() [132]
-----------------------------------------------
                0.00    0.00      14/14          std::allocator<DateTime*>::allocator() [135]
[134]    0.0    0.00    0.00      14         __gnu_cxx::new_allocator<DateTime*>::new_allocator() [134]
-----------------------------------------------
                0.00    0.00      14/14          std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl::_Vector_impl() [136]
[135]    0.0    0.00    0.00      14         std::allocator<DateTime*>::allocator() [135]
                0.00    0.00      14/14          __gnu_cxx::new_allocator<DateTime*>::new_allocator() [134]
-----------------------------------------------
                0.00    0.00      14/14          std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_base() [137]
[136]    0.0    0.00    0.00      14         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl::_Vector_impl() [136]
                0.00    0.00      14/14          std::allocator<DateTime*>::allocator() [135]
                0.00    0.00      14/23          std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl_data::_Vector_impl_data() [128]
-----------------------------------------------
                0.00    0.00      14/14          std::vector<DateTime*, std::allocator<DateTime*> >::vector() [138]
[137]    0.0    0.00    0.00      14         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_base() [137]
                0.00    0.00      14/14          std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl::_Vector_impl() [136]
-----------------------------------------------
                0.00    0.00       1/14          InterestRate::InterestRate(DateTime*, std::vector<DateTime*, std::allocator<DateTime*> > const&, _PnlMat*) [202]
                0.00    0.00       1/14          IMarketData::IMarketData(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, DateTime const*, DateTime const*) [200]
                0.00    0.00       1/14          HistoricalMarketData::set_Ocelia_data() [27]
                0.00    0.00       3/14          same_dates(std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&) [164]
                0.00    0.00       4/14          __static_initialization_and_destruction_0(int, int) [195]
                0.00    0.00       4/14          IDataFeed::IDataFeed(_PnlVectInt*, unsigned int, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [154]
[138]    0.0    0.00    0.00      14         std::vector<DateTime*, std::allocator<DateTime*> >::vector() [138]
                0.00    0.00      14/14          std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_base() [137]
-----------------------------------------------
                0.00    0.00       1/13          InterestRate::~InterestRate() [51]
                0.00    0.00       1/13          IMarketData::~IMarketData() [201]
                0.00    0.00       3/13          std::vector<DateTime*, std::allocator<DateTime*> >::_M_move_assign(std::vector<DateTime*, std::allocator<DateTime*> >&&, std::integral_constant<bool, true>) [170]
                0.00    0.00       4/13          HistoricalMarketData::set_Ocelia_data() [27]
                0.00    0.00       4/13          IDataFeed::~IDataFeed() [155]
[139]    0.0    0.00    0.00      13         std::vector<DateTime*, std::allocator<DateTime*> >::~vector() [139]
                0.00    0.00      17/318         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_M_get_Tp_allocator() [99]
                0.00    0.00      17/17          std::_Vector_base<DateTime*, std::allocator<DateTime*> >::~_Vector_base() [133]
                0.00    0.00      17/28          void std::_Destroy<DateTime**, DateTime*>(DateTime**, DateTime**, std::allocator<DateTime*>&) [126]
-----------------------------------------------
                0.00    0.00       1/9           IMarketData::~IMarketData() [201]
                0.00    0.00       1/9           HistoricalMarketData::set_Ocelia_data() [27]
                0.00    0.00       3/9           main [1]
                0.00    0.00       4/9           IDataFeed::~IDataFeed() [155]
[140]    0.0    0.00    0.00       9         delete_date_vector(std::vector<DateTime*, std::allocator<DateTime*> >&) [140]
                0.00    0.00   35245/35245       bool __gnu_cxx::operator!=<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > const&, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > const&) [84]
                0.00    0.00   35236/35236       __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >::operator*() const [87]
                0.00    0.00   35236/35239       DateTime::~DateTime() [85]
                0.00    0.00   35236/35236       __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >::operator++() [86]
                0.00    0.00       9/151         std::vector<DateTime*, std::allocator<DateTime*> >::begin() [114]
                0.00    0.00       9/151         std::vector<DateTime*, std::allocator<DateTime*> >::end() [113]
                0.00    0.00       9/9           std::vector<DateTime*, std::allocator<DateTime*> >::clear() [142]
-----------------------------------------------
                0.00    0.00       9/9           std::vector<DateTime*, std::allocator<DateTime*> >::clear() [142]
[141]    0.0    0.00    0.00       9         std::vector<DateTime*, std::allocator<DateTime*> >::_M_erase_at_end(DateTime**) [141]
                0.00    0.00       9/318         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_M_get_Tp_allocator() [99]
                0.00    0.00       9/28          void std::_Destroy<DateTime**, DateTime*>(DateTime**, DateTime**, std::allocator<DateTime*>&) [126]
-----------------------------------------------
                0.00    0.00       9/9           delete_date_vector(std::vector<DateTime*, std::allocator<DateTime*> >&) [140]
[142]    0.0    0.00    0.00       9         std::vector<DateTime*, std::allocator<DateTime*> >::clear() [142]
                0.00    0.00       9/9           std::vector<DateTime*, std::allocator<DateTime*> >::_M_erase_at_end(DateTime**) [141]
-----------------------------------------------
                0.00    0.00       1/8           main [1]
                0.00    0.00       2/8           Ocelia::init_indices(std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&) [215]
                0.00    0.00       5/8           get_prices_from_date(_PnlMat*, std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&, _PnlMat const*) [53]
[143]    0.0    0.00    0.00       8         calcul_indices_dates(_PnlVectInt*, std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&) [143]
                0.00    0.00   59296/128880      std::vector<DateTime*, std::allocator<DateTime*> >::operator[](unsigned long) const [67]
                0.00    0.00   29656/75470       std::vector<DateTime*, std::allocator<DateTime*> >::size() const [74]
                0.00    0.00   29648/68697       DateTime::compare(DateTime const*) const [76]
                0.00    0.00   12669/12681       pnl_vect_int_lget [59]
-----------------------------------------------
                0.00    0.00       4/8           std::vector<DateTime*, std::allocator<DateTime*> >::begin() const [158]
                0.00    0.00       4/8           std::vector<DateTime*, std::allocator<DateTime*> >::end() const [157]
[144]    0.0    0.00    0.00       8         __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >::__normal_iterator(DateTime* const* const&) [144]
-----------------------------------------------
                0.00    0.00       8/8           DateTime* const* std::__niter_base<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >) [147]
[145]    0.0    0.00    0.00       8         __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >::base() const [145]
-----------------------------------------------
                0.00    0.00       4/8           __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > std::copy<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > >(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >) [189]
                0.00    0.00       4/8           DateTime** std::copy<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**>(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**) [190]
[146]    0.0    0.00    0.00       8         __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > > std::__miter_base<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > > >(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >) [146]
-----------------------------------------------
                0.00    0.00       4/8           __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > std::__copy_move_a2<false, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > >(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >) [185]
                0.00    0.00       4/8           DateTime** std::__copy_move_a2<false, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**>(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**) [186]
[147]    0.0    0.00    0.00       8         DateTime* const* std::__niter_base<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >) [147]
                0.00    0.00       8/8           __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >::base() const [145]
-----------------------------------------------
                0.00    0.00       6/6           std::allocator<DateTime*>::allocator(std::allocator<DateTime*> const&) [149]
[148]    0.0    0.00    0.00       6         __gnu_cxx::new_allocator<DateTime*>::new_allocator(__gnu_cxx::new_allocator<DateTime*> const&) [148]
-----------------------------------------------
                0.00    0.00       3/6           std::_Vector_base<DateTime*, std::allocator<DateTime*> >::get_allocator() const [167]
                0.00    0.00       3/6           std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl::_Vector_impl(std::allocator<DateTime*> const&) [168]
[149]    0.0    0.00    0.00       6         std::allocator<DateTime*>::allocator(std::allocator<DateTime*> const&) [149]
                0.00    0.00       6/6           __gnu_cxx::new_allocator<DateTime*>::new_allocator(__gnu_cxx::new_allocator<DateTime*> const&) [148]
-----------------------------------------------
                0.00    0.00       6/6           std::vector<DateTime*, std::allocator<DateTime*> >::_M_move_assign(std::vector<DateTime*, std::allocator<DateTime*> >&&, std::integral_constant<bool, true>) [170]
[150]    0.0    0.00    0.00       6         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl_data::_M_swap_data(std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl_data&) [150]
                0.00    0.00      18/18          std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl_data::_M_copy_data(std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl_data const&) [131]
                0.00    0.00       6/23          std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl_data::_Vector_impl_data() [128]
-----------------------------------------------
                0.00    0.00       4/4           HistoricalMarketData::set_Ocelia_data() [27]
[151]    0.0    0.00    0.00       4         MarketDataFeed::MarketDataFeed(_PnlVectInt*, unsigned int, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [151]
                0.00    0.00       4/4           IDataFeed::IDataFeed(_PnlVectInt*, unsigned int, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [154]
-----------------------------------------------
                0.00    0.00       4/4           HistoricalMarketData::set_Ocelia_data() [27]
[152]    0.0    0.00    0.00       4         MarketDataFeed::~MarketDataFeed() [152]
                0.00    0.00       4/4           MarketDataFeed::~MarketDataFeed() [153]
-----------------------------------------------
                0.00    0.00       4/4           MarketDataFeed::~MarketDataFeed() [152]
[153]    0.0    0.00    0.00       4         MarketDataFeed::~MarketDataFeed() [153]
                0.00    0.00       4/4           IDataFeed::~IDataFeed() [155]
-----------------------------------------------
                0.00    0.00       4/4           MarketDataFeed::MarketDataFeed(_PnlVectInt*, unsigned int, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [151]
[154]    0.0    0.00    0.00       4         IDataFeed::IDataFeed(_PnlVectInt*, unsigned int, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [154]
                0.00    0.00       4/14          std::vector<DateTime*, std::allocator<DateTime*> >::vector() [138]
-----------------------------------------------
                0.00    0.00       4/4           MarketDataFeed::~MarketDataFeed() [153]
[155]    0.0    0.00    0.00       4         IDataFeed::~IDataFeed() [155]
                0.00    0.00       4/9           delete_date_vector(std::vector<DateTime*, std::allocator<DateTime*> >&) [140]
                0.00    0.00       4/13          std::vector<DateTime*, std::allocator<DateTime*> >::~vector() [139]
-----------------------------------------------
                0.00    0.00       4/4           std::vector<DateTime*, std::allocator<DateTime*> >::operator=(std::vector<DateTime*, std::allocator<DateTime*> > const&) [161]
[156]    0.0    0.00    0.00       4         __gnu_cxx::__alloc_traits<std::allocator<DateTime*>, DateTime*>::_S_propagate_on_copy_assign() [156]
-----------------------------------------------
                0.00    0.00       4/4           std::vector<DateTime*, std::allocator<DateTime*> >::operator=(std::vector<DateTime*, std::allocator<DateTime*> > const&) [161]
[157]    0.0    0.00    0.00       4         std::vector<DateTime*, std::allocator<DateTime*> >::end() const [157]
                0.00    0.00       4/8           __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >::__normal_iterator(DateTime* const* const&) [144]
-----------------------------------------------
                0.00    0.00       4/4           std::vector<DateTime*, std::allocator<DateTime*> >::operator=(std::vector<DateTime*, std::allocator<DateTime*> > const&) [161]
[158]    0.0    0.00    0.00       4         std::vector<DateTime*, std::allocator<DateTime*> >::begin() const [158]
                0.00    0.00       4/8           __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >::__normal_iterator(DateTime* const* const&) [144]
-----------------------------------------------
                0.00    0.00       4/4           std::vector<DateTime*, std::allocator<DateTime*> >::operator=(std::vector<DateTime*, std::allocator<DateTime*> > const&) [161]
[159]    0.0    0.00    0.00       4         std::vector<DateTime*, std::allocator<DateTime*> >::capacity() const [159]
-----------------------------------------------
                0.00    0.00       4/4           DateTime** std::__copy_move_a<false, DateTime* const*, DateTime**>(DateTime* const*, DateTime* const*, DateTime**) [163]
[160]    0.0    0.00    0.00       4         DateTime** std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<DateTime*>(DateTime* const*, DateTime* const*, DateTime**) [160]
-----------------------------------------------
                0.00    0.00       1/4           InterestRate::InterestRate(DateTime*, std::vector<DateTime*, std::allocator<DateTime*> > const&, _PnlMat*) [202]
                0.00    0.00       3/4           HistoricalMarketData::set_Ocelia_data() [27]
[161]    0.0    0.00    0.00       4         std::vector<DateTime*, std::allocator<DateTime*> >::operator=(std::vector<DateTime*, std::allocator<DateTime*> > const&) [161]
                0.00    0.00       6/75470       std::vector<DateTime*, std::allocator<DateTime*> >::size() const [74]
                0.00    0.00       4/4           __gnu_cxx::__alloc_traits<std::allocator<DateTime*>, DateTime*>::_S_propagate_on_copy_assign() [156]
                0.00    0.00       4/4           std::vector<DateTime*, std::allocator<DateTime*> >::capacity() const [159]
                0.00    0.00       4/4           std::vector<DateTime*, std::allocator<DateTime*> >::end() const [157]
                0.00    0.00       4/4           std::vector<DateTime*, std::allocator<DateTime*> >::begin() const [158]
                0.00    0.00       4/318         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_M_get_Tp_allocator() [99]
                0.00    0.00       2/2           DateTime** std::vector<DateTime*, std::allocator<DateTime*> >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > > >(unsigned long, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >) [182]
                0.00    0.00       2/28          void std::_Destroy<DateTime**, DateTime*>(DateTime**, DateTime**, std::allocator<DateTime*>&) [126]
                0.00    0.00       2/159         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_M_deallocate(DateTime**, unsigned long) [112]
                0.00    0.00       2/151         std::vector<DateTime*, std::allocator<DateTime*> >::end() [113]
                0.00    0.00       2/151         std::vector<DateTime*, std::allocator<DateTime*> >::begin() [114]
                0.00    0.00       2/2           __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > std::copy<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > >(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >) [189]
                0.00    0.00       2/2           void std::_Destroy<__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime*>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, std::allocator<DateTime*>&) [192]
-----------------------------------------------
                0.00    0.00       2/4           __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > std::__copy_move_a2<false, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > >(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >) [185]
                0.00    0.00       2/4           __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > std::__niter_wrap<__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**) [183]
[162]    0.0    0.00    0.00       4         DateTime** std::__niter_base<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >) [162]
                0.00    0.00       4/71054       __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >::base() const [75]
-----------------------------------------------
                0.00    0.00       2/4           __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > std::__copy_move_a2<false, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > >(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >) [185]
                0.00    0.00       2/4           DateTime** std::__copy_move_a2<false, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**>(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**) [186]
[163]    0.0    0.00    0.00       4         DateTime** std::__copy_move_a<false, DateTime* const*, DateTime**>(DateTime* const*, DateTime* const*, DateTime**) [163]
                0.00    0.00       4/4           DateTime** std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<DateTime*>(DateTime* const*, DateTime* const*, DateTime**) [160]
-----------------------------------------------
                0.00    0.00       3/3           HistoricalMarketData::set_Ocelia_data() [27]
[164]    0.0    0.00    0.00       3         same_dates(std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&) [164]
                0.00    0.00   44918/128880      std::vector<DateTime*, std::allocator<DateTime*> >::operator[](unsigned long) const [67]
                0.00    0.00   35531/75470       std::vector<DateTime*, std::allocator<DateTime*> >::size() const [74]
                0.00    0.00   17764/68697       DateTime::compare(DateTime const*) const [76]
                0.00    0.00    9390/9390        DateTime::copy() const [89]
                0.00    0.00    9390/38366       std::vector<DateTime*, std::allocator<DateTime*> >::push_back(DateTime*&&) [82]
                0.00    0.00       3/14          std::vector<DateTime*, std::allocator<DateTime*> >::vector() [138]
-----------------------------------------------
                0.00    0.00       1/3           InterestRate::InterestRate(DateTime*, std::vector<DateTime*, std::allocator<DateTime*> > const&, _PnlMat*) [202]
                0.00    0.00       2/3           main [1]
[165]    0.0    0.00    0.00       3         get_indice_from_date(std::vector<DateTime*, std::allocator<DateTime*> > const&, DateTime const*) [165]
                0.00    0.00       3/75470       std::vector<DateTime*, std::allocator<DateTime*> >::size() const [74]
                0.00    0.00       3/3           get_indices_from_date_dichotomic(std::vector<DateTime*, std::allocator<DateTime*> > const&, DateTime const*, int, int) [166]
-----------------------------------------------
                                  33             get_indices_from_date_dichotomic(std::vector<DateTime*, std::allocator<DateTime*> > const&, DateTime const*, int, int) [166]
                0.00    0.00       3/3           get_indice_from_date(std::vector<DateTime*, std::allocator<DateTime*> > const&, DateTime const*) [165]
[166]    0.0    0.00    0.00       3+33      get_indices_from_date_dichotomic(std::vector<DateTime*, std::allocator<DateTime*> > const&, DateTime const*, int, int) [166]
                0.00    0.00      36/128880      std::vector<DateTime*, std::allocator<DateTime*> >::operator[](unsigned long) const [67]
                0.00    0.00      36/68697       DateTime::compare(DateTime const*) const [76]
                                  33             get_indices_from_date_dichotomic(std::vector<DateTime*, std::allocator<DateTime*> > const&, DateTime const*, int, int) [166]
-----------------------------------------------
                0.00    0.00       3/3           std::vector<DateTime*, std::allocator<DateTime*> >::_M_move_assign(std::vector<DateTime*, std::allocator<DateTime*> >&&, std::integral_constant<bool, true>) [170]
[167]    0.0    0.00    0.00       3         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::get_allocator() const [167]
                0.00    0.00       3/283         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_M_get_Tp_allocator() const [101]
                0.00    0.00       3/6           std::allocator<DateTime*>::allocator(std::allocator<DateTime*> const&) [149]
-----------------------------------------------
                0.00    0.00       3/3           std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_base(std::allocator<DateTime*> const&) [169]
[168]    0.0    0.00    0.00       3         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl::_Vector_impl(std::allocator<DateTime*> const&) [168]
                0.00    0.00       3/23          std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl_data::_Vector_impl_data() [128]
                0.00    0.00       3/6           std::allocator<DateTime*>::allocator(std::allocator<DateTime*> const&) [149]
-----------------------------------------------
                0.00    0.00       3/3           std::vector<DateTime*, std::allocator<DateTime*> >::vector(std::allocator<DateTime*> const&) [171]
[169]    0.0    0.00    0.00       3         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_base(std::allocator<DateTime*> const&) [169]
                0.00    0.00       3/3           std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl::_Vector_impl(std::allocator<DateTime*> const&) [168]
-----------------------------------------------
                0.00    0.00       3/3           std::vector<DateTime*, std::allocator<DateTime*> >::operator=(std::vector<DateTime*, std::allocator<DateTime*> >&&) [172]
[170]    0.0    0.00    0.00       3         std::vector<DateTime*, std::allocator<DateTime*> >::_M_move_assign(std::vector<DateTime*, std::allocator<DateTime*> >&&, std::integral_constant<bool, true>) [170]
                0.00    0.00       6/6           std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl_data::_M_swap_data(std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl_data&) [150]
                0.00    0.00       6/318         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_M_get_Tp_allocator() [99]
                0.00    0.00       3/3           std::_Vector_base<DateTime*, std::allocator<DateTime*> >::get_allocator() const [167]
                0.00    0.00       3/3           std::vector<DateTime*, std::allocator<DateTime*> >::vector(std::allocator<DateTime*> const&) [171]
                0.00    0.00       3/20          std::allocator<DateTime*>::~allocator() [130]
                0.00    0.00       3/3           void std::__alloc_on_move<std::allocator<DateTime*> >(std::allocator<DateTime*>&, std::allocator<DateTime*>&) [173]
                0.00    0.00       3/13          std::vector<DateTime*, std::allocator<DateTime*> >::~vector() [139]
-----------------------------------------------
                0.00    0.00       3/3           std::vector<DateTime*, std::allocator<DateTime*> >::_M_move_assign(std::vector<DateTime*, std::allocator<DateTime*> >&&, std::integral_constant<bool, true>) [170]
[171]    0.0    0.00    0.00       3         std::vector<DateTime*, std::allocator<DateTime*> >::vector(std::allocator<DateTime*> const&) [171]
                0.00    0.00       3/3           std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_base(std::allocator<DateTime*> const&) [169]
-----------------------------------------------
                0.00    0.00       3/3           HistoricalMarketData::set_Ocelia_data() [27]
[172]    0.0    0.00    0.00       3         std::vector<DateTime*, std::allocator<DateTime*> >::operator=(std::vector<DateTime*, std::allocator<DateTime*> >&&) [172]
                0.00    0.00       3/3           std::remove_reference<std::vector<DateTime*, std::allocator<DateTime*> >&>::type&& std::move<std::vector<DateTime*, std::allocator<DateTime*> >&>(std::vector<DateTime*, std::allocator<DateTime*> >&) [176]
                0.00    0.00       3/3           std::vector<DateTime*, std::allocator<DateTime*> >::_M_move_assign(std::vector<DateTime*, std::allocator<DateTime*> >&&, std::integral_constant<bool, true>) [170]
-----------------------------------------------
                0.00    0.00       3/3           std::vector<DateTime*, std::allocator<DateTime*> >::_M_move_assign(std::vector<DateTime*, std::allocator<DateTime*> >&&, std::integral_constant<bool, true>) [170]
[173]    0.0    0.00    0.00       3         void std::__alloc_on_move<std::allocator<DateTime*> >(std::allocator<DateTime*>&, std::allocator<DateTime*>&) [173]
                0.00    0.00       3/3           void std::__do_alloc_on_move<std::allocator<DateTime*> >(std::allocator<DateTime*>&, std::allocator<DateTime*>&, std::integral_constant<bool, true>) [174]
-----------------------------------------------
                0.00    0.00       3/3           void std::__alloc_on_move<std::allocator<DateTime*> >(std::allocator<DateTime*>&, std::allocator<DateTime*>&) [173]
[174]    0.0    0.00    0.00       3         void std::__do_alloc_on_move<std::allocator<DateTime*> >(std::allocator<DateTime*>&, std::allocator<DateTime*>&, std::integral_constant<bool, true>) [174]
                0.00    0.00       3/3           std::remove_reference<std::allocator<DateTime*>&>::type&& std::move<std::allocator<DateTime*>&>(std::allocator<DateTime*>&) [175]
-----------------------------------------------
                0.00    0.00       3/3           void std::__do_alloc_on_move<std::allocator<DateTime*> >(std::allocator<DateTime*>&, std::allocator<DateTime*>&, std::integral_constant<bool, true>) [174]
[175]    0.0    0.00    0.00       3         std::remove_reference<std::allocator<DateTime*>&>::type&& std::move<std::allocator<DateTime*>&>(std::allocator<DateTime*>&) [175]
-----------------------------------------------
                0.00    0.00       3/3           std::vector<DateTime*, std::allocator<DateTime*> >::operator=(std::vector<DateTime*, std::allocator<DateTime*> >&&) [172]
[176]    0.0    0.00    0.00       3         std::remove_reference<std::vector<DateTime*, std::allocator<DateTime*> >&>::type&& std::move<std::vector<DateTime*, std::allocator<DateTime*> >&>(std::vector<DateTime*, std::allocator<DateTime*> >&) [176]
-----------------------------------------------
                0.00    0.00       1/2           main [1]
                0.00    0.00       1/2           HistoricalMarketData::set_Ocelia_data() [27]
[177]    0.0    0.00    0.00       2         from_date_to_date(std::vector<DateTime*, std::allocator<DateTime*> >&, std::vector<DateTime*, std::allocator<DateTime*> > const&, DateTime const*, DateTime const*) [177]
                0.00    0.00   24630/128880      std::vector<DateTime*, std::allocator<DateTime*> >::operator[](unsigned long) const [67]
                0.00    0.00   19424/68697       DateTime::compare(DateTime const*) const [76]
                0.00    0.00    9712/75470       std::vector<DateTime*, std::allocator<DateTime*> >::size() const [74]
                0.00    0.00    5206/5206        std::vector<DateTime*, std::allocator<DateTime*> >::push_back(DateTime* const&) [92]
-----------------------------------------------
                0.00    0.00       2/2           IMarketData::IMarketData(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, DateTime const*, DateTime const*) [200]
[178]    0.0    0.00    0.00       2         DateTime::DateTime(DateTime const*) [178]
-----------------------------------------------
                0.00    0.00       2/2           __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > std::__niter_wrap<__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**) [183]
[179]    0.0    0.00    0.00       2         __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >::operator+(long) const [179]
                0.00    0.00       2/304         __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >::__normal_iterator(DateTime** const&) [100]
-----------------------------------------------
                0.00    0.00       2/2           void std::_Destroy<__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > >(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >) [191]
[180]    0.0    0.00    0.00       2         void std::_Destroy_aux<true>::__destroy<__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > >(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >) [180]
-----------------------------------------------
                0.00    0.00       2/2           DateTime** std::uninitialized_copy<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**>(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**) [187]
[181]    0.0    0.00    0.00       2         DateTime** std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**>(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**) [181]
                0.00    0.00       2/2           DateTime** std::copy<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**>(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**) [190]
-----------------------------------------------
                0.00    0.00       2/2           std::vector<DateTime*, std::allocator<DateTime*> >::operator=(std::vector<DateTime*, std::allocator<DateTime*> > const&) [161]
[182]    0.0    0.00    0.00       2         DateTime** std::vector<DateTime*, std::allocator<DateTime*> >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > > >(unsigned long, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >) [182]
                0.00    0.00       2/142         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_M_allocate(unsigned long) [117]
                0.00    0.00       2/318         std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_M_get_Tp_allocator() [99]
                0.00    0.00       2/2           DateTime** std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**, DateTime*>(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**, std::allocator<DateTime*>&) [188]
-----------------------------------------------
                0.00    0.00       2/2           __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > std::__copy_move_a2<false, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > >(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >) [185]
[183]    0.0    0.00    0.00       2         __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > std::__niter_wrap<__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**) [183]
                0.00    0.00       2/4           DateTime** std::__niter_base<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >) [162]
                0.00    0.00       2/2           __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >::operator+(long) const [179]
-----------------------------------------------
                0.00    0.00       2/2           DateTime** std::__copy_move_a2<false, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**>(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**) [186]
[184]    0.0    0.00    0.00       2         DateTime** std::__niter_wrap<DateTime**>(DateTime** const&, DateTime**) [184]
-----------------------------------------------
                0.00    0.00       2/2           __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > std::copy<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > >(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >) [189]
[185]    0.0    0.00    0.00       2         __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > std::__copy_move_a2<false, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > >(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >) [185]
                0.00    0.00       4/8           DateTime* const* std::__niter_base<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >) [147]
                0.00    0.00       2/4           DateTime** std::__niter_base<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >) [162]
                0.00    0.00       2/4           DateTime** std::__copy_move_a<false, DateTime* const*, DateTime**>(DateTime* const*, DateTime* const*, DateTime**) [163]
                0.00    0.00       2/2           __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > std::__niter_wrap<__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**) [183]
-----------------------------------------------
                0.00    0.00       2/2           DateTime** std::copy<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**>(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**) [190]
[186]    0.0    0.00    0.00       2         DateTime** std::__copy_move_a2<false, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**>(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**) [186]
                0.00    0.00       4/8           DateTime* const* std::__niter_base<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >) [147]
                0.00    0.00       2/842         DateTime** std::__niter_base<DateTime**>(DateTime**) [97]
                0.00    0.00       2/4           DateTime** std::__copy_move_a<false, DateTime* const*, DateTime**>(DateTime* const*, DateTime* const*, DateTime**) [163]
                0.00    0.00       2/2           DateTime** std::__niter_wrap<DateTime**>(DateTime** const&, DateTime**) [184]
-----------------------------------------------
                0.00    0.00       2/2           DateTime** std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**, DateTime*>(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**, std::allocator<DateTime*>&) [188]
[187]    0.0    0.00    0.00       2         DateTime** std::uninitialized_copy<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**>(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**) [187]
                0.00    0.00       2/2           DateTime** std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**>(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**) [181]
-----------------------------------------------
                0.00    0.00       2/2           DateTime** std::vector<DateTime*, std::allocator<DateTime*> >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > > >(unsigned long, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >) [182]
[188]    0.0    0.00    0.00       2         DateTime** std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**, DateTime*>(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**, std::allocator<DateTime*>&) [188]
                0.00    0.00       2/2           DateTime** std::uninitialized_copy<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**>(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**) [187]
-----------------------------------------------
                0.00    0.00       2/2           std::vector<DateTime*, std::allocator<DateTime*> >::operator=(std::vector<DateTime*, std::allocator<DateTime*> > const&) [161]
[189]    0.0    0.00    0.00       2         __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > std::copy<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > >(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >) [189]
                0.00    0.00       4/8           __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > > std::__miter_base<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > > >(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >) [146]
                0.00    0.00       2/2           __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > std::__copy_move_a2<false, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > >(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >) [185]
-----------------------------------------------
                0.00    0.00       2/2           DateTime** std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**>(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**) [181]
[190]    0.0    0.00    0.00       2         DateTime** std::copy<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**>(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**) [190]
                0.00    0.00       4/8           __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > > std::__miter_base<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > > >(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >) [146]
                0.00    0.00       2/2           DateTime** std::__copy_move_a2<false, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**>(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**) [186]
-----------------------------------------------
                0.00    0.00       2/2           void std::_Destroy<__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime*>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, std::allocator<DateTime*>&) [192]
[191]    0.0    0.00    0.00       2         void std::_Destroy<__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > >(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >) [191]
                0.00    0.00       2/2           void std::_Destroy_aux<true>::__destroy<__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > >(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >) [180]
-----------------------------------------------
                0.00    0.00       2/2           std::vector<DateTime*, std::allocator<DateTime*> >::operator=(std::vector<DateTime*, std::allocator<DateTime*> > const&) [161]
[192]    0.0    0.00    0.00       2         void std::_Destroy<__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime*>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, std::allocator<DateTime*>&) [192]
                0.00    0.00       2/2           void std::_Destroy<__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > >(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >) [191]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [50]
[193]    0.0    0.00    0.00       1         _GLOBAL__sub_I__Z24set_stream_from_filenameRSoRSt13basic_fstreamIcSt11char_traitsIcEEPKc [193]
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [195]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [50]
[194]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN8DateTimeC2Eiii [194]
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [197]
-----------------------------------------------
                0.00    0.00       1/1           _GLOBAL__sub_I__Z24set_stream_from_filenameRSoRSt13basic_fstreamIcSt11char_traitsIcEEPKc [193]
[195]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [195]
                0.00    0.00       4/14          std::vector<DateTime*, std::allocator<DateTime*> >::vector() [138]
-----------------------------------------------
                0.00    0.00       1/1           _GLOBAL__sub_I__Z5splitPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS4_c [49]
[196]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [196]
-----------------------------------------------
                0.00    0.00       1/1           _GLOBAL__sub_I__ZN8DateTimeC2Eiii [194]
[197]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [197]
-----------------------------------------------
                0.00    0.00       1/1           Ocelia::Ocelia(double, int, int, double, _PnlVect*, InterestRate*) [216]
[198]    0.0    0.00    0.00       1         IDerivative::IDerivative(double, int) [198]
-----------------------------------------------
                0.00    0.00       1/1           Ocelia::~Ocelia() [218]
[199]    0.0    0.00    0.00       1         IDerivative::~IDerivative() [199]
-----------------------------------------------
                0.00    0.00       1/1           HistoricalMarketData::HistoricalMarketData(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, DateTime const*, DateTime const*) [207]
[200]    0.0    0.00    0.00       1         IMarketData::IMarketData(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, DateTime const*, DateTime const*) [200]
                0.00    0.00       2/2           DateTime::DateTime(DateTime const*) [178]
                0.00    0.00       1/14          std::vector<DateTime*, std::allocator<DateTime*> >::vector() [138]
-----------------------------------------------
                0.00    0.00       1/1           HistoricalMarketData::~HistoricalMarketData() [209]
[201]    0.0    0.00    0.00       1         IMarketData::~IMarketData() [201]
                0.00    0.00       2/35239       DateTime::~DateTime() [85]
                0.00    0.00       1/9           delete_date_vector(std::vector<DateTime*, std::allocator<DateTime*> >&) [140]
                0.00    0.00       1/13          std::vector<DateTime*, std::allocator<DateTime*> >::~vector() [139]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[202]    0.0    0.00    0.00       1         InterestRate::InterestRate(DateTime*, std::vector<DateTime*, std::allocator<DateTime*> > const&, _PnlMat*) [202]
                0.00    0.00       1/14          std::vector<DateTime*, std::allocator<DateTime*> >::vector() [138]
                0.00    0.00       1/4           std::vector<DateTime*, std::allocator<DateTime*> >::operator=(std::vector<DateTime*, std::allocator<DateTime*> > const&) [161]
                0.00    0.00       1/3           get_indice_from_date(std::vector<DateTime*, std::allocator<DateTime*> > const&, DateTime const*) [165]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[203]    0.0    0.00    0.00       1         HedgingPortfolio::HedgingPortfolio(double, _PnlVect const*, _PnlVect const*, InterestRate*, double) [203]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[204]    0.0    0.00    0.00       1         HedgingPortfolio::~HedgingPortfolio() [204]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[205]    0.0    0.00    0.00       1         BlackScholesModel::BlackScholesModel(int, int, InterestRate*, _PnlVect*) [205]
                0.00    0.00       1/1           IModel::IModel(int, int, InterestRate*, _PnlVect*) [213]
-----------------------------------------------
                0.00    0.00       1/1           BlackScholesModel::~BlackScholesModel() [48]
[206]    0.0    0.00    0.00       1         BlackScholesModel::~BlackScholesModel() [206]
                0.00    0.00       1/1           IModel::~IModel() [214]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[207]    0.0    0.00    0.00       1         HistoricalMarketData::HistoricalMarketData(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, DateTime const*, DateTime const*) [207]
                0.00    0.00       1/1           IMarketData::IMarketData(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, DateTime const*, DateTime const*) [200]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[208]    0.0    0.00    0.00       1         HistoricalMarketData::~HistoricalMarketData() [208]
                0.00    0.00       1/1           HistoricalMarketData::~HistoricalMarketData() [209]
-----------------------------------------------
                0.00    0.00       1/1           HistoricalMarketData::~HistoricalMarketData() [208]
[209]    0.0    0.00    0.00       1         HistoricalMarketData::~HistoricalMarketData() [209]
                0.00    0.00       1/1           IMarketData::~IMarketData() [201]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[210]    0.0    0.00    0.00       1         StandardMonteCarloPricer::StandardMonteCarloPricer(IModel*, IDerivative*, _PnlRng*, double, int) [210]
                0.00    0.00       1/1           IPricer::IPricer(IModel*, IDerivative*, _PnlRng*, double, int) [219]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[211]    0.0    0.00    0.00       1         StandardMonteCarloPricer::~StandardMonteCarloPricer() [211]
                0.00    0.00       1/1           StandardMonteCarloPricer::~StandardMonteCarloPricer() [212]
-----------------------------------------------
                0.00    0.00       1/1           StandardMonteCarloPricer::~StandardMonteCarloPricer() [211]
[212]    0.0    0.00    0.00       1         StandardMonteCarloPricer::~StandardMonteCarloPricer() [212]
                0.00    0.00       1/1           IPricer::~IPricer() [220]
-----------------------------------------------
                0.00    0.00       1/1           BlackScholesModel::BlackScholesModel(int, int, InterestRate*, _PnlVect*) [205]
[213]    0.0    0.00    0.00       1         IModel::IModel(int, int, InterestRate*, _PnlVect*) [213]
-----------------------------------------------
                0.00    0.00       1/1           BlackScholesModel::~BlackScholesModel() [206]
[214]    0.0    0.00    0.00       1         IModel::~IModel() [214]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[215]    0.0    0.00    0.00       1         Ocelia::init_indices(std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&) [215]
                0.00    0.00       2/8           calcul_indices_dates(_PnlVectInt*, std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&) [143]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[216]    0.0    0.00    0.00       1         Ocelia::Ocelia(double, int, int, double, _PnlVect*, InterestRate*) [216]
                0.00    0.00       1/1           IDerivative::IDerivative(double, int) [198]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[217]    0.0    0.00    0.00       1         Ocelia::~Ocelia() [217]
                0.00    0.00       1/1           Ocelia::~Ocelia() [218]
-----------------------------------------------
                0.00    0.00       1/1           Ocelia::~Ocelia() [217]
[218]    0.0    0.00    0.00       1         Ocelia::~Ocelia() [218]
                0.00    0.00       1/1           IDerivative::~IDerivative() [199]
-----------------------------------------------
                0.00    0.00       1/1           StandardMonteCarloPricer::StandardMonteCarloPricer(IModel*, IDerivative*, _PnlRng*, double, int) [210]
[219]    0.0    0.00    0.00       1         IPricer::IPricer(IModel*, IDerivative*, _PnlRng*, double, int) [219]
-----------------------------------------------
                0.00    0.00       1/1           StandardMonteCarloPricer::~StandardMonteCarloPricer() [212]
[220]    0.0    0.00    0.00       1         IPricer::~IPricer() [220]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2020 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

 [193] _GLOBAL__sub_I__Z24set_stream_from_filenameRSoRSt13basic_fstreamIcSt11char_traitsIcEEPKc (main.cpp) [178] DateTime::DateTime(DateTime const*) [91] void std::allocator_traits<std::allocator<DateTime*> >::construct<DateTime*, DateTime* const&>(std::allocator<DateTime*>&, DateTime**, DateTime* const&)
  [49] _GLOBAL__sub_I__Z5splitPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS4_c (Utilities.cpp) [78] DateTime::DateTime(int, int, int) [80] void std::allocator_traits<std::allocator<DateTime*> >::construct<DateTime*, DateTime*>(std::allocator<DateTime*>&, DateTime**, DateTime*&&)
 [194] _GLOBAL__sub_I__ZN8DateTimeC2Eiii (DateTime.cpp) [85] DateTime::~DateTime() [181] DateTime** std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**>(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**)
 [164] same_dates(std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&) [154] IDataFeed::IDataFeed(_PnlVectInt*, unsigned int, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [104] std::vector<DateTime*, std::allocator<DateTime*> >::_S_max_size(std::allocator<DateTime*> const&)
  [44] log_returns(_PnlMat*, _PnlMat const*, int, int) [155] IDataFeed::~IDataFeed() [105] std::vector<DateTime*, std::allocator<DateTime*> >::_S_relocate(DateTime**, DateTime**, DateTime**, std::allocator<DateTime*>&)
   [2] simulate_all()        [115] __gnu_cxx::new_allocator<DateTime*>::deallocate(DateTime**, unsigned long) [81] void std::vector<DateTime*, std::allocator<DateTime*> >::emplace_back<DateTime*>(DateTime*&&)
  [35] compute_sigma(_PnlMat*, _PnlMat const*, int, int) [116] __gnu_cxx::new_allocator<DateTime*>::allocate(unsigned long, void const*) [170] std::vector<DateTime*, std::allocator<DateTime*> >::_M_move_assign(std::vector<DateTime*, std::allocator<DateTime*> >&&, std::integral_constant<bool, true>)
  [24] first_index_gte(_PnlVect const*, double) [90] void __gnu_cxx::new_allocator<DateTime*>::construct<DateTime*, DateTime* const&>(DateTime**, DateTime* const&) [106] std::vector<DateTime*, std::allocator<DateTime*> >::_S_do_relocate(DateTime**, DateTime**, DateTime**, std::allocator<DateTime*>&, std::integral_constant<bool, true>)
  [34] are_all_positive(_PnlVect const*) [79] void __gnu_cxx::new_allocator<DateTime*>::construct<DateTime*, DateTime*>(DateTime**, DateTime*&&) [141] std::vector<DateTime*, std::allocator<DateTime*> >::_M_erase_at_end(DateTime**)
  [52] parse_dates_file(std::vector<DateTime*, std::allocator<DateTime*> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, char) [148] __gnu_cxx::new_allocator<DateTime*>::new_allocator(__gnu_cxx::new_allocator<DateTime*> const&) [107] std::vector<DateTime*, std::allocator<DateTime*> >::_S_use_relocate()
 [177] from_date_to_date(std::vector<DateTime*, std::allocator<DateTime*> >&, std::vector<DateTime*, std::allocator<DateTime*> > const&, DateTime const*, DateTime const*) [134] __gnu_cxx::new_allocator<DateTime*>::new_allocator() [127] void std::vector<DateTime*, std::allocator<DateTime*> >::_M_realloc_insert<DateTime* const&>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime* const&)
  [42] parse_date_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char) [129] __gnu_cxx::new_allocator<DateTime*>::~new_allocator() [123] void std::vector<DateTime*, std::allocator<DateTime*> >::_M_realloc_insert<DateTime*>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime*&&)
  [39] compute_covariance(_PnlMat const*, _PnlVect const*, int, int) [156] __gnu_cxx::__alloc_traits<std::allocator<DateTime*>, DateTime*>::_S_propagate_on_copy_assign() [108] std::vector<DateTime*, std::allocator<DateTime*> >::_S_nothrow_relocate(std::integral_constant<bool, true>)
  [55] compute_volatility(_PnlVect*, _PnlMat const*) [144] __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >::__normal_iterator(DateTime* const* const&) [182] DateTime** std::vector<DateTime*, std::allocator<DateTime*> >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > > >(unsigned long, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >)
 [140] delete_date_vector(std::vector<DateTime*, std::allocator<DateTime*> >&) [100] __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >::__normal_iterator(DateTime** const&) [113] std::vector<DateTime*, std::allocator<DateTime*> >::end()
  [36] compute_covariances(_PnlMat*, _PnlMat const*, int, int) [86] __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >::operator++() [114] std::vector<DateTime*, std::allocator<DateTime*> >::begin()
 [143] calcul_indices_dates(_PnlVectInt*, std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&) [69] int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) [142] std::vector<DateTime*, std::allocator<DateTime*> >::clear()
 [165] get_indice_from_date(std::vector<DateTime*, std::allocator<DateTime*> > const&, DateTime const*) [120] __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >::difference_type __gnu_cxx::operator-<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > const&, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > const&) [82] std::vector<DateTime*, std::allocator<DateTime*> >::push_back(DateTime*&&)
  [53] get_prices_from_date(_PnlMat*, std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&, _PnlMat const*) [84] bool __gnu_cxx::operator!=<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > const&, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > const&) [92] std::vector<DateTime*, std::allocator<DateTime*> >::push_back(DateTime* const&)
  [47] has_no_index_value_null(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*, _PnlVectInt const*) [41] MarketDataFeed::get_number_valid_data() const [138] std::vector<DateTime*, std::allocator<DateTime*> >::vector()
  [56] set_stream_from_filename(std::ostream&, std::basic_fstream<char, std::char_traits<char> >&, char const*) [37] HedgingPortfolio::get_FinalPnL(double, double, _PnlVect const*) const [171] std::vector<DateTime*, std::allocator<DateTime*> >::vector(std::allocator<DateTime*> const&)
 [166] get_indices_from_date_dichotomic(std::vector<DateTime*, std::allocator<DateTime*> > const&, DateTime const*, int, int) [38] HedgingPortfolio::get_tracking_error(double, double, _PnlVect const*) const [139] std::vector<DateTime*, std::allocator<DateTime*> >::~vector()
 [195] __static_initialization_and_destruction_0(int, int) (main.cpp) [32] HedgingPortfolio::get_portfolio_value(double, _PnlVect const*) const [172] std::vector<DateTime*, std::allocator<DateTime*> >::operator=(std::vector<DateTime*, std::allocator<DateTime*> >&&)
 [196] __static_initialization_and_destruction_0(int, int) (Utilities.cpp) [33] HedgingPortfolio::get_valeur_liquidative(double, _PnlVect const*) const [161] std::vector<DateTime*, std::allocator<DateTime*> >::operator=(std::vector<DateTime*, std::allocator<DateTime*> > const&)
 [197] __static_initialization_and_destruction_0(int, int) (DateTime.cpp) [18] BlackScholesModel::shift_asset(_PnlMat*, double, _PnlMat const*, int, double) const [93] std::vector<DateTime*, std::allocator<DateTime*> >::operator[](unsigned long)
  [96] means(_PnlVect*, _PnlMat const*) [57] Ocelia::adjust_past(_PnlMat*) const [70] std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int)
  [30] split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char) [46] Ocelia::adjust_spot(_PnlVect*, double) const [146] __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > > std::__miter_base<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > > >(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >)
  [17] trunc(_PnlVect*, int)  [54] Ocelia::adjust_sigma(_PnlMat*) const [147] DateTime* const* std::__niter_base<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >)
 [198] IDerivative::IDerivative(double, int) [43] Ocelia::get_annee_payoff() const [97] DateTime** std::__niter_base<DateTime**>(DateTime**)
 [199] IDerivative::~IDerivative() [14] Ocelia::compute_flux_n_ans(_PnlMat const*, int) const [162] DateTime** std::__niter_base<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >)
 [200] IMarketData::IMarketData(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, DateTime const*, DateTime const*) [6] Ocelia::compute_perfs_n_ans(_PnlVect*, _PnlMat const*, int) const [183] __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > std::__niter_wrap<__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**)
 [201] IMarketData::~IMarketData() [7] Ocelia::compute_valeurs_n_ans(_PnlVect*, _PnlMat const*, int) const [184] DateTime** std::__niter_wrap<DateTime**>(DateTime** const&, DateTime**)
  [23] InterestRate::get_foreign_rate(int) [16] Ocelia::compute_perf_moyenne_panier(_PnlMat const*) const [109] DateTime** std::__relocate_a<DateTime**, DateTime**, std::allocator<DateTime*> >(DateTime**, DateTime**, DateTime**, std::allocator<DateTime*>&)
  [25] InterestRate::get_domestic_rate() [11] Ocelia::get_foreign_index_market_value(_PnlMat const*, int, int) const [163] DateTime** std::__copy_move_a<false, DateTime* const*, DateTime**>(DateTime* const*, DateTime* const*, DateTime**)
  [19] InterestRate::compute_foreign_risk_free_asset(double, double, int) [89] DateTime::copy() const [185] __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > std::__copy_move_a2<false, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > >(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >)
  [26] InterestRate::compute_domestic_risk_free_asset(double, double) [76] DateTime::compare(DateTime const*) const [186] DateTime** std::__copy_move_a2<false, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**>(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**)
 [202] InterestRate::InterestRate(DateTime*, std::vector<DateTime*, std::allocator<DateTime*> > const&, _PnlMat*) [98] __gnu_cxx::new_allocator<DateTime*>::max_size() const [110] std::enable_if<std::__is_bitwise_relocatable<DateTime*, void>::value, DateTime**>::type std::__relocate_a_1<DateTime*, DateTime*>(DateTime**, DateTime**, DateTime**, std::allocator<DateTime*>&)
  [51] InterestRate::~InterestRate() [145] __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >::base() const [173] void std::__alloc_on_move<std::allocator<DateTime*> >(std::allocator<DateTime*>&, std::allocator<DateTime*>&)
  [29] MarketDataFeed::set_data() [75] __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >::base() const [174] void std::__do_alloc_on_move<std::allocator<DateTime*> >(std::allocator<DateTime*>&, std::allocator<DateTime*>&, std::integral_constant<bool, true>)
 [151] MarketDataFeed::MarketDataFeed(_PnlVectInt*, unsigned int, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [87] __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >::operator*() const [187] DateTime** std::uninitialized_copy<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**>(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**)
 [152] MarketDataFeed::~MarketDataFeed() [179] __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >::operator+(long) const [188] DateTime** std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**, DateTime*>(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**, std::allocator<DateTime*>&)
 [153] MarketDataFeed::~MarketDataFeed() [167] std::_Vector_base<DateTime*, std::allocator<DateTime*> >::get_allocator() const [94] __gnu_cxx::__enable_if<std::__is_integer<int>::__value, double>::__type std::exp<int>(int)
  [45] HedgingPortfolio::rebalancing(double, _PnlVect const*, _PnlVect const*) [101] std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_M_get_Tp_allocator() const [122] unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)
 [203] HedgingPortfolio::HedgingPortfolio(double, _PnlVect const*, _PnlVect const*, InterestRate*, double) [121] std::vector<DateTime*, std::allocator<DateTime*> >::_M_check_len(unsigned long, char const*) const [111] unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)
 [204] HedgingPortfolio::~HedgingPortfolio() [157] std::vector<DateTime*, std::allocator<DateTime*> >::end() const [40] __gnu_cxx::__promote_2<int, int, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type>::__type std::pow<int, int>(int, int)
   [8] BlackScholesModel::asset(_PnlMat*, double, _PnlRng*, _PnlVect const*) [74] std::vector<DateTime*, std::allocator<DateTime*> >::size() const [189] __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > std::copy<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > >(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >)
 [205] BlackScholesModel::BlackScholesModel(int, int, InterestRate*, _PnlVect*) [158] std::vector<DateTime*, std::allocator<DateTime*> >::begin() const [190] DateTime** std::copy<__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**>(__gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime* const*, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime**)
  [48] BlackScholesModel::~BlackScholesModel() [159] std::vector<DateTime*, std::allocator<DateTime*> >::capacity() const [83] std::remove_reference<DateTime*&>::type&& std::move<DateTime*&>(DateTime*&)
 [206] BlackScholesModel::~BlackScholesModel() [102] std::vector<DateTime*, std::allocator<DateTime*> >::max_size() const [175] std::remove_reference<std::allocator<DateTime*>&>::type&& std::move<std::allocator<DateTime*>&>(std::allocator<DateTime*>&)
  [27] HistoricalMarketData::set_Ocelia_data() [67] std::vector<DateTime*, std::allocator<DateTime*> >::operator[](unsigned long) const [176] std::remove_reference<std::vector<DateTime*, std::allocator<DateTime*> >&>::type&& std::move<std::vector<DateTime*, std::allocator<DateTime*> >&>(std::vector<DateTime*, std::allocator<DateTime*> >&)
  [28] HistoricalMarketData::set_data() [149] std::allocator<DateTime*>::allocator(std::allocator<DateTime*> const&) [68] DateTime*&& std::forward<DateTime*>(std::remove_reference<DateTime*>::type&)
 [207] HistoricalMarketData::HistoricalMarketData(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, DateTime const*, DateTime const*) [135] std::allocator<DateTime*>::allocator() [88] DateTime* const& std::forward<DateTime* const&>(std::remove_reference<DateTime* const&>::type&)
 [208] HistoricalMarketData::~HistoricalMarketData() [130] std::allocator<DateTime*>::~allocator() [191] void std::_Destroy<__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > >(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >)
 [209] HistoricalMarketData::~HistoricalMarketData() [160] DateTime** std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<DateTime*>(DateTime* const*, DateTime* const*, DateTime**) [192] void std::_Destroy<__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, DateTime*>(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, std::allocator<DateTime*>&)
   [9] StandardMonteCarloPricer::price_and_delta(_PnlVect const*, double, double&, double&, _PnlVect*, _PnlVect*) [180] void std::_Destroy_aux<true>::__destroy<__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > > >(__gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >, __gnu_cxx::__normal_iterator<DateTime**, std::vector<DateTime*, std::allocator<DateTime*> > >) [125] void std::_Destroy<DateTime**>(DateTime**, DateTime**)
   [3] StandardMonteCarloPricer::price(_PnlVect const*, double, double&, double&) [124] void std::_Destroy_aux<true>::__destroy<DateTime**>(DateTime**, DateTime**) [126] void std::_Destroy<DateTime**, DateTime*>(DateTime**, DateTime**, std::allocator<DateTime*>&)
  [10] StandardMonteCarloPricer::add_delta(double, _PnlVect*, _PnlVect*) [117] std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_M_allocate(unsigned long) [66] bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)
   [5] StandardMonteCarloPricer::add_price(double, double&, double&) [168] std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl::_Vector_impl(std::allocator<DateTime*> const&) [31] std::operator|(std::_Ios_Openmode, std::_Ios_Openmode)
 [210] StandardMonteCarloPricer::StandardMonteCarloPricer(IModel*, IDerivative*, _PnlRng*, double, int) [136] std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl::_Vector_impl() [71] __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Range_chk::_S_chk(long, std::integral_constant<bool, true>)
 [211] StandardMonteCarloPricer::~StandardMonteCarloPricer() [132] std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl::~_Vector_impl() [72] __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::_Save_errno()
 [212] StandardMonteCarloPricer::~StandardMonteCarloPricer() [112] std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_M_deallocate(DateTime**, unsigned long) [73] __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::~_Save_errno()
 [213] IModel::IModel(int, int, InterestRate*, _PnlVect*) [131] std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl_data::_M_copy_data(std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl_data const&) [95] operator<<(std::ostream&, DateTime const*)
 [214] IModel::~IModel()     [150] std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl_data::_M_swap_data(std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl_data&) [58] operator<<(std::ostream&, _PnlVect const*)
 [215] Ocelia::init_indices(std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&, std::vector<DateTime*, std::allocator<DateTime*> > const&) [128] std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_impl_data::_Vector_impl_data() [77] operator new(unsigned long, void*)
  [15] Ocelia::compute_nouveau_depart(_PnlMat const*) [99] std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_M_get_Tp_allocator() [13] pnl_mat_get
   [4] Ocelia::payoff(_PnlMat const*) [169] std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_base(std::allocator<DateTime*> const&) [20] pnl_mat_lget
 [216] Ocelia::Ocelia(double, int, int, double, _PnlVect*, InterestRate*) [137] std::_Vector_base<DateTime*, std::allocator<DateTime*> >::_Vector_base() [12] pnl_vect_get
 [217] Ocelia::~Ocelia()     [133] std::_Vector_base<DateTime*, std::allocator<DateTime*> >::~_Vector_base() [21] pnl_vect_int_get
 [218] Ocelia::~Ocelia()     [118] std::allocator_traits<std::allocator<DateTime*> >::deallocate(std::allocator<DateTime*>&, DateTime**, unsigned long) [59] pnl_vect_int_lget
 [219] IPricer::IPricer(IModel*, IDerivative*, _PnlRng*, double, int) [119] std::allocator_traits<std::allocator<DateTime*> >::allocate(std::allocator<DateTime*>&, unsigned long) [22] pnl_vect_lget
 [220] IPricer::~IPricer()   [103] std::allocator_traits<std::allocator<DateTime*> >::max_size(std::allocator<DateTime*> const&)
